--- a/Pari.xs	2025-10-14 16:52:57.823951256 +0200
+++ b/Pari.xs	2025-10-14 16:51:38.682116556 +0200
@@ -52,6 +52,21 @@
 #include "XSUB.h"
 #include "func_codes.h"
 
+#define CALL_AS(ret, f, ...)  ((ret (*)(...))(f))(__VA_ARGS__)
+#define CALL_F(ret, ...)      CALL_AS(ret, FUNCTION, __VA_ARGS__)
+#define CALL_FR(ret, ...)     CALL_AS(ret, FUNCTION_real, __VA_ARGS__)
+
+/* --- GCC-safe vararg casting helpers for legacy PARI prototypes --- */
+#ifndef MP_VARARG_CAST_HELPERS
+#define MP_VARARG_CAST_HELPERS
+  /* Call f(...) as though it were a varargs function returning `ret` */
+  #define CALL_AS(ret, f, ...)  ((ret (*)(...))(f))(__VA_ARGS__)
+  /* Short-hands for the two function-pointer macros used here */
+  #define CALL_F(ret, ...)      CALL_AS(ret, FUNCTION, __VA_ARGS__)
+  #define CALL_FR(ret, ...)     CALL_AS(ret, FUNCTION_real, __VA_ARGS__)
+#endif
+/* ------------------------------------------------------------------ */
+
 #ifdef NEED_TO_REDEFINE_LONG
 #  ifdef SSize_t		/* XXX  Defect in Perl???  Not in 5.18.0, but in 5.28.1. */
 typedef SSize_t mySSize_t;
@@ -2558,7 +2573,7 @@
     if (rettype != RETTYPE_VOID)
 	croak("Expected VOID return type, got code '%s'", ep->code);
     
-    (FUNCTION_real)(THE_ARGS_SUPPORTED);
+    ((void (*)(...))FUNCTION_real)(THE_ARGS_SUPPORTED);
     if (has_pointer) 
 	check_pointer(has_pointer,argvec);
     if (OUT_cnt)
@@ -2586,7 +2601,7 @@
     if (rettype != RETTYPE_GEN)
 	croak("Expected GEN return type, got code '%s'", ep->code);
     
-    RETVAL = (FUNCTION_real)(THE_ARGS_SUPPORTED);
+    RETVAL = ((GEN (*)(...))FUNCTION_real)(THE_ARGS_SUPPORTED);
     if (has_pointer) 
 	check_pointer(has_pointer,argvec);
     if (OUT_cnt)
@@ -2616,7 +2631,7 @@
     if (rettype != RETTYPE_LONG)
 	croak("Expected long return type, got code '%s'", ep->code);
     
-    RETVAL = FUNCTION_real(THE_ARGS_SUPPORTED);
+    RETVAL = ((long (*)(...))FUNCTION_real)(THE_ARGS_SUPPORTED);
     if (has_pointer) 
 	check_pointer(has_pointer,argvec);
     if (OUT_cnt)
@@ -2646,7 +2661,7 @@
     if (rettype != RETTYPE_INT)
 	croak("Expected int return type, got code '%s'", ep->code);
     
-    RETVAL=FUNCTION_real(argvec[0], argvec[1], argvec[2], argvec[3],
+    RETVAL=((int (*)(...))FUNCTION_real)(argvec[0], argvec[1], argvec[2], argvec[3],
 	          argvec[4], argvec[5], argvec[6], argvec[7], argvec[8]);
     if (has_pointer) 
 	check_pointer(has_pointer,argvec);
@@ -2667,7 +2682,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(prec_words);
+    RETVAL=((GEN (*)(...))FUNCTION)(prec_words);
   }
  OUTPUT:
    RETVAL
@@ -2683,7 +2698,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION();
+    RETVAL = CALL_F(typeof(RETVAL), );
   }
  OUTPUT:
    RETVAL
@@ -2700,7 +2715,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,prec_words);
+    RETVAL=((GEN (*)(...))FUNCTION)(arg1,prec_words);
   }
  OUTPUT:
    RETVAL
@@ -2723,7 +2738,7 @@
 
     PERL_UNUSED_VAR(arg2); /* -W */
     PERL_UNUSED_VAR(inv); /* -W */
-    RETVAL=FUNCTION(arg1,prec_words);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,prec_words);
   }
  OUTPUT:
    RETVAL
@@ -2740,7 +2755,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1);
+    RETVAL = CALL_F(typeof(RETVAL), arg1);
   }
  OUTPUT:
    RETVAL
@@ -2765,7 +2780,7 @@
 
     PERL_UNUSED_VAR(arg2); /* -W */
     PERL_UNUSED_VAR(inv); /* -W */
-    RETVAL=FUNCTION(arg1);
+    RETVAL = CALL_F(typeof(RETVAL), arg1);
   }
  OUTPUT:
    RETVAL
@@ -2784,7 +2799,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1);
+    RETVAL = CALL_F(typeof(RETVAL), arg1);
   }
  OUTPUT:
    RETVAL
@@ -2801,7 +2816,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1);
+    RETVAL = CALL_F(typeof(RETVAL), arg1);
   }
  OUTPUT:
    RETVAL
@@ -2820,7 +2835,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1);
+    RETVAL = CALL_F(typeof(RETVAL), arg1);
   }
  OUTPUT:
    RETVAL
@@ -2838,7 +2853,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2);
   }
  OUTPUT:
    RETVAL
@@ -2859,7 +2874,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL = inv? FUNCTION(arg2,arg1): FUNCTION(arg1,arg2);
+    RETVAL = inv? CALL_F(typeof(RETVAL), arg2,arg1): CALL_F(typeof(RETVAL), arg1,arg2);
   }
  OUTPUT:
    RETVAL
@@ -2877,7 +2892,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2);
   }
  OUTPUT:
    RETVAL
@@ -2900,7 +2915,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL = (inv? FUNCTION(arg2,arg1): FUNCTION(arg1,arg2)) == gen_1;
+    RETVAL = (inv? CALL_F(GEN, arg2,arg1) : CALL_F(GEN, arg1,arg2)) == gen_1;
   }
  OUTPUT:
    RETVAL
@@ -2923,7 +2938,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL = inv? FUNCTION(arg2,arg1): FUNCTION(arg1,arg2);
+    RETVAL = inv? CALL_F(typeof(RETVAL), arg2,arg1): CALL_F(typeof(RETVAL), arg1,arg2);
   }
  OUTPUT:
    RETVAL
@@ -2946,7 +2961,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL = inv? FUNCTION(arg2,arg1): FUNCTION(arg1,arg2);
+    RETVAL = inv? CALL_F(typeof(RETVAL), arg2,arg1): CALL_F(typeof(RETVAL), arg1,arg2);
   }
  OUTPUT:
    RETVAL
@@ -2966,7 +2981,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2,prec_words);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2,prec_words);
   }
  OUTPUT:
    RETVAL
@@ -2985,7 +3000,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2,arg3);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2,arg3);
   }
  OUTPUT:
    RETVAL
@@ -3004,7 +3019,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2,arg3);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2,arg3);
   }
  OUTPUT:
    RETVAL
@@ -3026,7 +3041,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2,arg3,arg4);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2,arg3,arg4);
   }
  OUTPUT:
    RETVAL
@@ -3046,7 +3061,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2,arg3,arg4,prec_words);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2,arg3,arg4,prec_words);
   }
  OUTPUT:
    RETVAL
@@ -3064,7 +3079,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,numvar(arg2), precdl);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,numvar(arg2), precdl);
   }
  OUTPUT:
    RETVAL
@@ -3083,7 +3098,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1, arg2, arg3);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, arg3);
   }
  OUTPUT:
    RETVAL
@@ -3101,7 +3116,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2 ? numvar(arg2) : -1);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2 ? numvar(arg2) : -1);
   }
  OUTPUT:
    RETVAL
@@ -3119,7 +3134,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2);
   }
  OUTPUT:
    RETVAL
@@ -3149,7 +3164,7 @@
 	arg2 = (long)SvIV(ST(1));	
     }
 
-    RETVAL = FUNCTION(arg1,arg2);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2);
   }
  OUTPUT:
    RETVAL
@@ -3168,9 +3183,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    RETVAL = FUNCTION(arg1, arg3);		/* XXXX Omit `V' instead of merging it into I/E */
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg3);		/* XXXX Omit `V' instead of merging it into I/E */
 #else
-    RETVAL = FUNCTION(arg1, arg2, arg3);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, arg3);
 #endif
   }
  OUTPUT:
@@ -3189,7 +3204,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2);
   }
  OUTPUT:
    RETVAL
@@ -3207,7 +3222,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2);
   }
  OUTPUT:
    RETVAL
@@ -3226,7 +3241,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2,arg3);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2,arg3);
   }
  OUTPUT:
    RETVAL
@@ -3245,7 +3260,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1, numvar(arg2), arg3);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, numvar(arg2), arg3);
   }
  OUTPUT:
    RETVAL
@@ -3264,9 +3279,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    RETVAL=FUNCTION(arg2, arg3, prec_words);		/* XXXX Omit `V' instead of merging it into I/E */
+    RETVAL = CALL_F(typeof(RETVAL), arg2, arg3, prec_words);		/* XXXX Omit `V' instead of merging it into I/E */
 #else
-    RETVAL=FUNCTION(arg1, arg2, arg3, prec_words);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, arg3, prec_words);
 #endif
   }
  OUTPUT:
@@ -3286,9 +3301,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    RETVAL = FUNCTION(arg1, arg3);		/* XXXX Omit `V' instead of merging it into I/E */
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg3);		/* XXXX Omit `V' instead of merging it into I/E */
 #else
-    RETVAL = FUNCTION(arg1, arg2, arg3);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, arg3);
 #endif
   }
  OUTPUT:
@@ -3308,7 +3323,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1, arg2, &junk);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, &junk);
   }
  OUTPUT:
    RETVAL
@@ -3326,7 +3341,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2);
   }
  OUTPUT:
    RETVAL
@@ -3348,7 +3363,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1, arg2, arg3, arg4 ? &arg4 : NULL);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, arg3, arg4 ? &arg4 : NULL);
   }
  OUTPUT:
    RETVAL
@@ -3367,7 +3382,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2,arg3);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2,arg3);
   }
  OUTPUT:
    RETVAL
@@ -3387,7 +3402,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1,arg2,arg3,arg4,prec_words);
+    RETVAL = CALL_F(typeof(RETVAL), arg1,arg2,arg3,arg4,prec_words);
   }
  OUTPUT:
    RETVAL
@@ -3405,7 +3420,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    FUNCTION(arg1, arg2, arg3);
+    ((void (*)(...))FUNCTION)(arg1, arg2, arg3);
   }
 
 void
@@ -3422,7 +3437,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    FUNCTION(arg1,arg2,arg3);
+    CALL_F(void, arg1,arg2,arg3);
   }
  CLEANUP:
    avma=oldavma;
@@ -3442,9 +3457,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    RETVAL=FUNCTION(arg2, arg3, arg4, prec_words);	/* XXXX Omit `V' instead of merging it into I/E */
+    RETVAL = CALL_F(typeof(RETVAL), arg2, arg3, arg4, prec_words);	/* XXXX Omit `V' instead of merging it into I/E */
 #else
-    RETVAL=FUNCTION(arg1, arg2, arg3, arg4, prec_words);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, arg3, arg4, prec_words);
 #endif
   }
  OUTPUT:
@@ -3466,9 +3481,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    RETVAL=FUNCTION(arg2, arg3, arg4, arg0);	/* XXXX Omit `V' instead of merging it into I/E */
+    RETVAL = CALL_F(typeof(RETVAL), arg2, arg3, arg4, arg0);	/* XXXX Omit `V' instead of merging it into I/E */
 #else
-    RETVAL=FUNCTION(arg1, arg2, arg3, arg4, arg0);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, arg3, arg4, arg0);
 #endif
   }
  OUTPUT:
@@ -3490,9 +3505,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    RETVAL=FUNCTION(arg2, arg3, arg4, arg0);	/* XXXX Omit `V' instead of merging it into I/E */
+    RETVAL = CALL_F(typeof(RETVAL), arg2, arg3, arg4, arg0);	/* XXXX Omit `V' instead of merging it into I/E */
 #else
-    RETVAL=FUNCTION(arg1, arg2, arg3, arg4, arg0);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, arg3, arg4, arg0);
 #endif
   }
  OUTPUT:
@@ -3526,9 +3541,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    RETVAL=FUNCTION(arg0, arg00, arg3);	/* XXXX Omit two `V's instead of merging them into I/E */
+    RETVAL = CALL_F(typeof(RETVAL), arg0, arg00, arg3);	/* XXXX Omit two `V's instead of merging them into I/E */
 #else
-    RETVAL=FUNCTION(arg0, arg00, arg1, arg2, arg3);
+    RETVAL = CALL_F(typeof(RETVAL), arg0, arg00, arg1, arg2, arg3);
 #endif
   }
  OUTPUT:
@@ -3549,9 +3564,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    FUNCTION(arg2, arg3, arg4);		/* XXXX Omit `V' instead of merging it into I/E */
+    CALL_F(void, arg2, arg3, arg4);		/* XXXX Omit `V' instead of merging it into I/E */
 #else
-    FUNCTION(arg1, arg2, arg3, arg4);
+    CALL_F(void, arg1, arg2, arg3, arg4);
 #endif
   }
  CLEANUP:
@@ -3571,9 +3586,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    FUNCTION(arg1, arg3);		/* XXXX Omit `V' instead of merging it into I/E */
+    CALL_F(void, arg1, arg3);		/* XXXX Omit `V' instead of merging it into I/E */
 #else
-    FUNCTION(arg1, arg2, arg3);
+    CALL_F(void, arg1, arg2, arg3);
 #endif
   }
  CLEANUP:
@@ -3593,7 +3608,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1);
+    RETVAL = CALL_F(typeof(RETVAL), arg1);
   }
  OUTPUT:
    RETVAL
@@ -3612,7 +3627,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    FUNCTION(arg1, arg2);
+    CALL_F(void, arg1, arg2);
   }
 
 GEN
@@ -3630,7 +3645,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1, arg2, arg3, arg4);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, arg3, arg4);
   }
  OUTPUT:
    RETVAL
@@ -3649,7 +3664,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    RETVAL=FUNCTION(arg1, arg2, arg3);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, arg3);
   }
  OUTPUT:
    RETVAL
@@ -3670,7 +3685,7 @@
       croak("XSUB call through interface did not provide *function");
     }
 
-    FUNCTION(arg1, arg2, arg3, arg4, arg5);
+    CALL_F(void, arg1, arg2, arg3, arg4, arg5);
   }
  CLEANUP:
    avma=oldavma;
@@ -3693,9 +3708,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    RETVAL=FUNCTION(arg1, arg3, arg4, arg5, prec_words, arg6, arg7);	/* XXXX Omit `V' instead of merging it into I/E */
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg3, arg4, arg5, prec_words, arg6, arg7);	/* XXXX Omit `V' instead of merging it into I/E */
 #else
-    RETVAL=FUNCTION(arg1, arg2, arg3, arg4, arg5, prec_words, arg6, arg7);
+    RETVAL = CALL_F(typeof(RETVAL), arg1, arg2, arg3, arg4, arg5, prec_words, arg6, arg7);
 #endif
   }
  OUTPUT:
@@ -3717,9 +3732,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    FUNCTION(arg2, arg3, arg4, arg5);	/* XXXX Omit `V' instead of merging it into I/E */
+    CALL_F(void, arg2, arg3, arg4, arg5);	/* XXXX Omit `V' instead of merging it into I/E */
 #else
-    FUNCTION(arg1, arg2, arg3, arg4, arg5);
+    CALL_F(void, arg1, arg2, arg3, arg4, arg5);
 #endif
   }
  CLEANUP:
@@ -3740,9 +3755,9 @@
       croak("XSUB call through interface did not provide *function");
     }
 #if PARI_VERSION_EXP >= 2004002
-    FUNCTION(arg2, arg3, arg4);		/* XXXX Omit `V' instead of merging it into I/E */
+    CALL_F(void, arg2, arg3, arg4);		/* XXXX Omit `V' instead of merging it into I/E */
 #else
-    FUNCTION(arg1, arg2, arg3, arg4);
+    CALL_F(void, arg1, arg2, arg3, arg4);
 #endif
   }
  CLEANUP:
--- a/pari-2.3.5/src/language/anal.c	2025-10-14 16:53:12.728107781 +0200
+++ b/pari-2.3.5/src/language/anal.c	2025-10-14 16:52:29.872657157 +0200
@@ -1842,7 +1842,7 @@
 static GEN
 do_call(void *call, GEN x, GEN argvec[])
 {
-  return ((PFGEN)call)(x, argvec[1], argvec[2], argvec[3], argvec[4],
+  return ((GEN (*)(...))call)(x, argvec[1], argvec[2], argvec[3], argvec[4],
                           argvec[5], argvec[6], argvec[7], argvec[8]);
 }
 
@@ -2184,19 +2184,19 @@
     else switch (ret)
       {
       case RET_GEN:
-        res = ((PFGEN)call)(_ARGS_);
+        res = ((GEN (*)(...))call)(_ARGS_);
         break;
 
       case RET_INT:
-	m = (long)((int (*)(ANYARG))call)(_ARGS_);
+	m = (long)((int (*)(...))call)(_ARGS_);
 	res = stoi(m); break;
 
       case RET_LONG:
-	m = ((long (*)(ANYARG))call)(_ARGS_);
+	m = ((long (*)(...))call)(_ARGS_);
 	res = stoi(m); break;
 
       default: /* RET_VOID */
-	((void (*)(ANYARG))call)(_ARGS_);
+	((void (*)(...))call)(_ARGS_);
 	res = gnil; break;
       }
     gp_function_name = oldname;
