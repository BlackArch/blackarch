# This file is part of BlackArch Linux ( https://www.blackarch.org/ ).
#
# This PKGBUILD was extracted from AUR and adapted to our style
#
# Maintainer: aimileus <me at aimileus dot nl>
# Maintainer: Maciej Borzecki <maciek.borzecki@gmail.com>
# Contributor: Timothy Redaelli <timothy.redaelli@gmail.com>
# Contributor: Zygmunt Krynicki <me at zygoon dot pl>

pkgname=snapd
pkgver=2.45
pkgrel=1
pkgdesc='Service and tools for management of snap packages.'
arch=('x86_64' 'aarch64')
url='https://github.com/snapcore/snapd'
license=('GPL3')
depends=('squashfs-tools' 'libseccomp' 'libsystemd' 'apparmor')
optdepends=('bash-completion: bash completion support'
            'xdg-desktop-portal: desktop integration')
makedepends=('git' 'go' 'go-tools' 'libseccomp' 'libcap' 'systemd' 'xfsprogs'
             'python-docutils' 'apparmor')
conflicts=('snap-confine')
options=('!strip' 'emptydirs')
source=("$pkgname-$pkgver.tar.xz::https://github.com/snapcore/${pkgname}/releases/download/${pkgver}/${pkgname}_${pkgver}.vendor.tar.xz"
        '0001-fontconfig-compat.patch'
        '0002-zsh-completion.patch')
install="$pkgname.install"
sha512sums=('3fa169cc85d105a350f5149efc52ff913d345b7034fa90a9bb49ef8e2627243eeb812890be61ba022f3b17d532ce3eb51ad3bf158a93a0ccb95476a6e7772d86'
            '67282a5829e23e47fba4e580ac831f973e3bf7cf9701e78c46b1909f63d7bc4bbed0bda005e497d6281fcbc801ff69a925768bec0e8439fbd5d73aa9fafd1669'
            'e43137129d0cf57911c98642413da3f6d1d783a1c6f4dbf358842150373ca0f88bcd46715c0942e09be8eabb528f9403785f550ca31e68b8cd4903404764dfcb')

_gourl=github.com/snapcore/snapd

prepare() {
  cd "$pkgname-$pkgver"

  export GOPATH="$srcdir/go"
  mkdir -p "$GOPATH"

  # Have snapd checkout appear in a place suitable for subsequent GOPATH. This
  # way we don't have to go get it again and it is exactly what the tag/hash
  # above describes.
  mkdir -p "$(dirname "$GOPATH/src/$_gourl")"
  ln --no-target-directory -fs "$srcdir/$pkgname-$pkgver" "$GOPATH/src/$_gourl"

  for name in "${source[@]}"; do
      if [[ "${name%.patch}" == "$name" ]]; then
          # not a patch
          continue
      fi
      msg2 "applying $name"
      patch -p1 -i "$srcdir/$name"
  done
}

build() {
  cd "$pkgname-$pkgver"
  export GOPATH="$srcdir/go"
  # snapd does not support modules yet, explicitly disable Go modules
  export GO111MODULE=off

  export CGO_ENABLED="1"
  export CGO_CFLAGS="${CFLAGS}"
  export CGO_CPPFLAGS="${CPPFLAGS}"
  export CGO_CXXFLAGS="${CXXFLAGS}"
  export CGO_LDFLAGS="${LDFLAGS}"

  ./mkversion.sh $pkgver-$pkgrel

  flags=(-buildmode=pie -ldflags "-s -extldflags '$LDFLAGS'")
  staticflags=(-buildmode=pie -ldflags "-s -extldflags '$LDFLAGS -static'")
  # Build/install snap and snapd
  go build "${flags[@]}" -o "$srcdir/go/bin/snap" "$_gourl/cmd/snap"
  go build "${flags[@]}" -o "$srcdir/go/bin/snapd" "$_gourl/cmd/snapd"
  go build "${flags[@]}" -o "$srcdir/go/bin/snap-seccomp" \
    "$_gourl/cmd/snap-seccomp"
  go build "${flags[@]}" -o "$srcdir/go/bin/snap-failure" \
    "$_gourl/cmd/snap-failure"
  # build snap-exec and snap-update-ns completely static for base snaps
  go build "${staticflags[@]}" -o "$srcdir/go/bin/snap-update-ns" \
    "$_gourl/cmd/snap-update-ns"
  go build "${staticflags[@]}" -o "$srcdir/go/bin/snap-exec" \
    "$_gourl/cmd/snap-exec"
  go build "${staticflags[@]}" -o "$srcdir/go/bin/snapctl" "$_gourl/cmd/snapctl"

  # Generate data files such as real systemd units, dbus service, environment
  # setup helpers out of the available templates
  make -C data \
       BINDIR=/bin \
       LIBEXECDIR=/usr/lib \
       SYSTEMDSYSTEMUNITDIR=/usr/lib/systemd/system \
       SNAP_MOUNT_DIR=/var/lib/snapd/snap \
       SNAPD_ENVIRONMENT_FILE=/etc/default/snapd

  cd cmd
  autoreconf -i -f
  ./configure \
    --prefix=/usr \
    --libexecdir=/usr/lib/snapd \
    --with-snap-mount-dir=/var/lib/snapd/snap \
    --enable-apparmor \
    --enable-nvidia-biarch \
    --enable-merged-usr
  make $MAKEFLAGS
}

check() {
    export GOPATH="$srcdir/go"
    cd "$srcdir/go/src/${_gourl}"

    # make sure the binaries that need to be built statically really are
    for binary in snap-exec snap-update-ns snapctl; do
      LC_ALL=C ldd "$srcdir/go/bin/$binary" 2>&1 |
      grep -q 'not a dynamic executable'
    done
}

package() {
  cd "$pkgname-$pkgver"
  export GOPATH="$srcdir/go"
  # snapd does not use modules, setting GO111MODULE=on in the environment breaks
  # the build
  unset GO111MODULE

  make -C data/ install \
       DBUSSERVICESDIR=/usr/share/dbus-1/services \
       BINDIR=/usr/bin \
       SYSTEMDSYSTEMUNITDIR=/usr/lib/systemd/system \
       SNAP_MOUNT_DIR=/var/lib/snapd/snap \
       DESTDIR="$pkgdir"

  rm -rf "$pkgdir/etc/sudoers.d"

  # Install polkit policy
  install -Dm 644 data/polkit/io.snapcraft.snapd.policy \
    "$pkgdir/usr/share/polkit-1/actions/io.snapcraft.snapd.policy"

  # Install executables
  install -Dm 755 "$srcdir/go/bin/snap" "$pkgdir/usr/bin/snap"
  install -Dm 755 "$srcdir/go/bin/snapctl" "$pkgdir/usr/lib/snapd/snapctl"
  install -Dm 755 "$srcdir/go/bin/snapd" "$pkgdir/usr/lib/snapd/snapd"
  install -Dm 755 "$srcdir/go/bin/snap-seccomp" \
    "$pkgdir/usr/lib/snapd/snap-seccomp"
  install -Dm 755 "$srcdir/go/bin/snap-failure" \
    "$pkgdir/usr/lib/snapd/snap-failure"
  install -Dm 755 "$srcdir/go/bin/snap-update-ns" \
    "$pkgdir/usr/lib/snapd/snap-update-ns"
  install -Dm 755 "$srcdir/go/bin/snap-exec" \
    "$pkgdir/usr/lib/snapd/snap-exec"

  install -dm 755 "$pkgdir/var/lib/snapd/snap"
  install -dm 755 "$pkgdir/var/cache/snapd"
  install -dm 755 "$pkgdir/var/lib/snapd/apparmor"
  install -dm 755 "$pkgdir/var/lib/snapd/assertions"
  install -dm 755 "$pkgdir/var/lib/snapd/desktop/applications"
  install -dm 755 "$pkgdir/var/lib/snapd/device"
  install -dm 755 "$pkgdir/var/lib/snapd/hostfs"
  install -dm 755 "$pkgdir/var/lib/snapd/mount"
  install -dm 755 "$pkgdir/var/lib/snapd/seccomp/bpf"
  install -dm 755 "$pkgdir/var/lib/snapd/snap/bin"
  install -dm 755 "$pkgdir/var/lib/snapd/snaps"
  install -dm 755 "$pkgdir/var/lib/snapd/inhibit"
  install -dm 755 "$pkgdir/var/lib/snapd/lib/gl"
  install -dm 755 "$pkgdir/var/lib/snapd/lib/gl32"
  install -dm 755 "$pkgdir/var/lib/snapd/lib/vulkan"
  install -dm 755 "$pkgdir/var/lib/snapd/lib/glvnd"
  install -dm 111 "$pkgdir/var/lib/snapd/void"
  install -dm 700 "$pkgdir/var/lib/snapd/cookie"
  install -dm 700 "$pkgdir/var/lib/snapd/cache"
  install -Dm 644 "$srcdir/go/src/${_gourl}/data/info" \
    "$pkgdir/usr/lib/snapd/info"

  install -Dm 644 data/completion/bash/snap \
    "$pkgdir/usr/share/bash-completion/completions/snap"
  install -Dm 644 data/completion/bash/complete.sh \
    "$pkgdir/usr/lib/snapd/complete.sh"
  install -Dm 644 data/completion/bash/etelpmoc.sh \
    "$pkgdir/usr/lib/snapd/etelpmoc.sh"
  install -Dm 644 data/completion/zsh/_snap \
    "$pkgdir/usr/share/zsh/site-functions/_snap"

  ln -s /usr/lib/snapd/snapctl "$pkgdir/usr/bin/snapctl"
  ln -s /var/lib/snapd/snap "$pkgdir/snap"

  make -C cmd install DESTDIR="$pkgdir/"

  # Install man file
  mkdir -p "$pkgdir/usr/share/man/man8"
  "$srcdir/go/bin/snap" help --man > "$pkgdir/usr/share/man/man8/snap.8"

  # Remove snappy core specific units
  rm -f "$pkgdir/usr/lib/systemd/system/snapd.system-shutdown.service"
  rm -f "$pkgdir/usr/lib/systemd/system/snapd.autoimport.service"
  rm -f "$pkgdir"/usr/lib/systemd/system/snapd.snap-repair.*
  rm -f "$pkgdir"/usr/lib/systemd/system/snapd.core-fixup.*
  rm -f "$pkgdir/usr/lib/snapd/snapd.core-fixup.sh"
  rm -f "$pkgdir/usr/bin/ubuntu-core-launcher"
  rm -f "$pkgdir/usr/lib/snapd/system-shutdown"
}

