--- src/ranger/ranger.py	2017-07-22 06:56:06.633333334 -0400
+++ ranger.py	2017-07-22 06:56:19.203333329 -0400
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 '''
 Libraries
 '''
@@ -36,9 +36,9 @@
     from impacket.dcerpc.v5.dcomrt import DCOMConnection
     from impacket.dcerpc.v5.dcom import wmi
     from impacket.dcerpc.v5.dtypes import NULL
-    from impacket.examples import remcomsvc, serviceinstall, logger 
+    from impacket.examples import remcomsvc, serviceinstall, logger
     from impacket.dcerpc.v5 import transport, scmr, wkst, srvs, samr, rpcrt, rrp
-    from impacket.dcerpc import ndrutils, atsvc
+    from impacket.dcerpc.v5 import ndr, atsvc
     from impacket.dcerpc.v5.rpcrt import DCERPCException
     from impacket.nt_errors import STATUS_MORE_ENTRIES
     from impacket.structure import Structure
@@ -964,7 +964,7 @@
 
         upperName = name.upper()
 
-        #DEBUG logging.info('%s ' % name) 
+        #DEBUG logging.info('%s ' % name)
 
         secret = ''
 
@@ -1426,7 +1426,7 @@
     def finish(self):
         if self.__NTDS is not None:
             self.__ESEDB.close()
-    
+
     def return_output_hashes(self):
         return(self.output_hashes)
 
@@ -1584,7 +1584,7 @@
                     self.cleanup()
                 except:
                     pass
-    
+
     def return_output_hashes(self):
         set = sets.Set(self.output_hashes)
         output_hashes = list(set)
@@ -2359,7 +2359,7 @@
                 else:
                     raise
         smbConnection.deleteFile('ADMIN$', 'Temp\\%s' % tmpFileName)
- 
+
         dce.disconnect()
 
 '''
@@ -2801,7 +2801,7 @@
         if smbConnection is not None:
             smbConnection.logoff()
         dcom.disconnect()
-        
+
     def return_data(self):
         return(self.shell.return_data())
 
@@ -2809,7 +2809,7 @@
     def __init__(self, share, win32Process, smbConnection):
         cmd.Cmd.__init__(self)
         self.__share = share
-        self.__output = '\\' + WMIEXEC_OUTPUT_FILENAME 
+        self.__output = '\\' + WMIEXEC_OUTPUT_FILENAME
         self.__outputBuffer = ''
         self.__shell = 'cmd.exe /Q /c '
         self.__win32Process = win32Process
@@ -2833,9 +2833,9 @@
  lcd {path}                 - changes the current local directory to {path}
  exit                       - terminates the server process (and this session)
  put {src_file, dst_path}   - uploads a local file to the dst_path (dst_path = default current directory)
- get {file}                 - downloads pathname to the current local dir 
+ get {file}                 - downloads pathname to the current local dir
  ! {cmd}                    - executes a local shell cmd
-""" 
+"""
 
     def do_lcd(self, s):
         if s == '':
@@ -2847,7 +2847,7 @@
         try:
             import ntpath
             newPath = ntpath.normpath(ntpath.join(self.__pwd, src_path))
-            drive, tail = ntpath.splitdrive(newPath) 
+            drive, tail = ntpath.splitdrive(newPath)
             filename = ntpath.basename(tail)
             fh = open(filename,'wb')
             logging.info("Downloading %s\\%s" % (drive, tail))
@@ -2904,7 +2904,7 @@
         if len(line) == 2 and line[1] == ':':
             # Execute the command and see if the drive is valid
             self.execute_remote(line)
-            if len(self.__outputBuffer.strip('\r\n')) > 0: 
+            if len(self.__outputBuffer.strip('\r\n')) > 0:
                 # Something went wrong
                 #print(self.__outputBuffer)
                 self.__outputBuffer = ''
@@ -2938,11 +2938,11 @@
                     pass
                 else:
                     #print str(e)
-                    pass 
+                    pass
         self.__transferClient.deleteFile(self.__share, self.__output)
 
     def execute_remote(self, data):
-        command = self.__shell + data 
+        command = self.__shell + data
         if self.__noOutput is False:
             command += ' 1> ' + '\\\\127.0.0.1\\%s' % self.__share + self.__output  + ' 2>&1'
         obj = self.__win32Process.Create(command, self.__pwd, None)
@@ -3494,7 +3494,7 @@
                 else:
                     print("[-] Could not execute the command against %s using the domain %s user %s and password %s at: %s") % (dst, dom, usr, pwd, st)
                 return
-    else:         
+    else:
         with Timeout(timeout_value):
             try:
                 if hash:
@@ -3520,7 +3520,7 @@
         if not state:
             if verbose > 1:
                 print("[-] Host %s port %s is closed") % (dst, verify_port)
-            return #replaced continue inside a function 
+            return #replaced continue inside a function
     if attacks:
         print(instructions)
     if hash:
@@ -3655,7 +3655,7 @@
                 return # changed from continue inside a function
     return(creds_dict)
 
-def netview_func(dst, usr, pwd, dom, hash, aes, kerberos, final_targets, methods, scan_type, verbose, verify_port, timeout_value, logger_obj, output_cat, st, creds_dict, command): 
+def netview_func(dst, usr, pwd, dom, hash, aes, kerberos, final_targets, methods, scan_type, verbose, verify_port, timeout_value, logger_obj, output_cat, st, creds_dict, command):
     if scan_type:
         state = verify_open(verbose, scan_type, verify_port, dst)
         if not state:
@@ -3825,7 +3825,7 @@
 '''
 CREDENTIAL Functions
 '''
-# PWD AND HASH TEST        
+# PWD AND HASH TEST
 def pwd_test(pwd, verbose, usr = None):
     SID = None
     NTLM = ""
@@ -3837,7 +3837,7 @@
     if pwd and ":" in pwd and pwd.count(':') == 5 and "\\" in pwd:
         pwdump_format_hash = pwd.split(':')
         temp_key = pwdump_format_hash[0]
-        dom_temp, usr = temp_key.split('\\') 
+        dom_temp, usr = temp_key.split('\\')
         dom_temp = dom_temp.lower()
         usr = usr.lower()
         SID = None
@@ -3931,7 +3931,7 @@
         temp_list[11] = cached_temp
     creds_dict[temp_key] = temp_list
     return(creds_dict)
-			
+
 def not_in_cred_dict(verbose, temp_list, SID_temp, LM_temp, NTLM_temp, hash_temp, usr_temp, pwd_temp, dom_temp, local_admin_temp, groups_temp, logged_in_temp, temp_key, creds_dict, access_to_temp, cached_temp):
     temp_list = []
     if LM_temp == ":" or LM_temp == "" or LM_temp == " ":
@@ -4175,7 +4175,7 @@
         message = "[!] Credential %s does not have a username" % (str(cred))
         notice = failure + message + cleanup
         logger_obj.info(notice)
-    return(creds_dict)    
+    return(creds_dict)
 
 def is_empty(structure):
     if structure:
@@ -4230,7 +4230,7 @@
             filename = k + "_" + dst
             dir = invoker_file + filename
             with open(dir, 'w') as f:
-                f.write(data)            
+                f.write(data)
         elif "executor" in k:
             if verbose > 0:
                 logger_obj.info(data)
@@ -4360,14 +4360,14 @@
         creds_dict = sam_dump_func(dst, usr, hash, dom, aes, kerberos, system, security, sam, ntds, pwd, scan_type, verbose, verify_port, timeout_value, logger_obj, output_cat, st, creds_dict, command)
     else:
         print(instructions)
-    return(creds_dict) 
+    return(creds_dict)
 
 def matrix_read(creds_matrix):
     with open(creds_matrix, 'r') as f:
         s = f.read()
         creds_dict = ast.literal_eval(s)
     return(creds_dict)
-    
+
 def matrix_write(creds_dict, recovery, logger_obj):
     if recovery:
         creds_matrix = "/opt/ranger/results/recovery/recovery_matrix"
@@ -4502,7 +4502,7 @@
     epic = (colorama.Fore.YELLOW)
     parse_list = data.splitlines(True)
     wdigest_indices = [i for i, elem in enumerate(parse_list) if 'wdigest' in elem]
-    msv_indices = [i for i, elem in enumerate(parse_list) if 'msv' in elem] 
+    msv_indices = [i for i, elem in enumerate(parse_list) if 'msv' in elem]
     for item in wdigest_indices:
         item_range = item + 4
         wdigest_results[wi] = parse_list[item:item_range]
@@ -4559,14 +4559,14 @@
                         test_d, test_u, test_p = wdigest_dict[keyed]
                         if test_p == None and raw_password:
                             wdigest_dict[keyed] = [raw_domain, raw_username, raw_password]
-                    else:    
+                    else:
                         wdigest_dict[keyed] = [raw_domain, raw_username, raw_password]
                 else:
-                    continue               
+                    continue
             except Exception as e:
                 notice = "[!] An error occurred: %s" % (e)
                 notice = failure + notice + cleanup
-                logger_obj.info(notice)            
+                logger_obj.info(notice)
     for k, v in msv_results.iteritems():
         try:
             for item in v:
@@ -4590,7 +4590,7 @@
                 raw_domain = raw_domain.strip()
             else:
                 raw_domain = None
-            if raw_username and "null" not in raw_username:    
+            if raw_username and "null" not in raw_username:
                 raw_username = raw_username.strip()
             else:
                 raw_username = None
@@ -4660,7 +4660,7 @@
         if dom_temp and usr_temp:
             temp_key = dom_temp + "\\" + usr_temp
             message_list_temp, creds_dict = logged_in_users_method(verbose, creds_dict, dom_temp, dst, data_null, usr_temp)
-            message_list.extend(message_list_temp)       
+            message_list.extend(message_list_temp)
             try:
                 if not pwd_temp:
                     message = "[-] %s\\%s password was nullified in memory" % (str(dom_temp), str(usr_temp))
@@ -5233,7 +5233,7 @@
         creds_dict = add_to_creds_dict(logger_obj, verbose, creds_dict, dom, cred, usr, pwd)
     #elif creds_matrix and not usr and pwd:
     #    creds_dict = add_to_creds_dict(logger_obj, verbose, creds_dict, dom, cred, usr, pwd)
-     
+
     #print(creds_dict) #DEBUG
 
     if smbexec_cmd:
@@ -5270,7 +5270,7 @@
            src_ip = network_ifaces[interface]['addr']
         except Exception, e:
             print("[!] Could not identify an IP address on interface %s") % (str(interface))
-	
+
     if src_ip == None:
         sys.exit()
 
@@ -5313,7 +5313,7 @@
                 sys.exit(1)
     else:
         tgt_list.extend(targets_list)
-    
+
     # Process exceptions
     if exception_filename:
         with open(exception_filename) as f:
@@ -5545,14 +5545,14 @@
                     for dst in final_targets:
                         creds_dict = method_func(psexec_cmd, wmiexec_cmd, netview_cmd, smbexec_cmd, atexec_cmd, sam_dump, dst, src_port, cwd, delivery, share_name, usr, hash, pwd, dom, command, unprotected_command, protocol, attacks, kerberos, aes, mode, share, instructions, directory, scan_type, verbose, verify_port, final_targets, system, security, sam, ntds, no_output, encoder, timeout_value, sleep_value, logger_obj, output_cat, methods, creds_dict)
                         time.sleep(sleep_value)
-            else: 
+            else:
                 for dst in final_targets:
                     creds_dict = method_func(psexec_cmd, wmiexec_cmd, netview_cmd, smbexec_cmd, atexec_cmd, sam_dump, dst, src_port, cwd, delivery, share_name, usr, hash, pwd, dom, command, unprotected_command, protocol, attacks, kerberos, aes, mode, share, instructions, directory, scan_type, verbose, verify_port, final_targets, system, security, sam, ntds, no_output, encoder, timeout_value, sleep_value, logger_obj, output_cat, methods, creds_dict)
                     time.sleep(sleep_value)
         except (Exception, KeyboardInterrupt), e:
             print("[!] An error occurred: %s") % (e)
 
-    data_writer(creds_dict, dst, final_targets, recovery, logger_obj)   
+    data_writer(creds_dict, dst, final_targets, recovery, logger_obj)
 
     if srv:
          srv.terminate()
