--- src/forkedsimhash-py-0.4.2/simhash/simhash.cpp	2021-03-17 19:07:42.032642600 +0100
+++ simhash.cpp	2024-05-01 20:17:45.113333013 +0200
@@ -46,7 +46,7 @@
   #define CYTHON_USE_PYLONG_INTERNALS 1
 #endif
 #if CYTHON_USE_PYLONG_INTERNALS
-  #include "longintrepr.h"
+  #include "/usr/include/python3.12/cpython/longintrepr.h"
   #undef SHIFT
   #undef BASE
   #undef MASK
@@ -510,7 +510,7 @@
 struct __pyx_obj___pyx_scope_struct____Pyx_CFunc_size__t____hash__t____hash__t___to_py;
 
 /* "cfunc.to_py":64
- * 
+ *
  * @cname("__Pyx_CFunc_size__t____hash__t____hash__t___to_py")
  * cdef object __Pyx_CFunc_size__t____hash__t____hash__t___to_py(size_t (*f)(hash_t, hash_t) except *):             # <<<<<<<<<<<<<<
  *     def wrap(hash_t a, hash_t b):
@@ -917,8 +917,8 @@
 static PyObject *__pyx_codeobj__5;
 
 /* "simhash/simhash.pyx":8
- * 
- * 
+ *
+ *
  * def unsigned_hash(bytes obj):             # <<<<<<<<<<<<<<
  *     '''Returns a hash suitable for use as a hash_t.'''
  *     return struct.unpack('>Q', hashlib.md5(obj).digest()[0:8])[0] & 0xFFFFFFFFFFFFFFFF
@@ -961,7 +961,7 @@
  * def unsigned_hash(bytes obj):
  *     '''Returns a hash suitable for use as a hash_t.'''
  *     return struct.unpack('>Q', hashlib.md5(obj).digest()[0:8])[0] & 0xFFFFFFFFFFFFFFFF             # <<<<<<<<<<<<<<
- * 
+ *
  * def compute(hashes):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -1062,8 +1062,8 @@
   goto __pyx_L0;
 
   /* "simhash/simhash.pyx":8
- * 
- * 
+ *
+ *
  * def unsigned_hash(bytes obj):             # <<<<<<<<<<<<<<
  *     '''Returns a hash suitable for use as a hash_t.'''
  *     return struct.unpack('>Q', hashlib.md5(obj).digest()[0:8])[0] & 0xFFFFFFFFFFFFFFFF
@@ -1088,7 +1088,7 @@
 
 /* "simhash/simhash.pyx":12
  *     return struct.unpack('>Q', hashlib.md5(obj).digest()[0:8])[0] & 0xFFFFFFFFFFFFFFFF
- * 
+ *
  * def compute(hashes):             # <<<<<<<<<<<<<<
  *     '''Compute the simhash of a vector of hashes.'''
  *     return c_compute(hashes)
@@ -1119,7 +1119,7 @@
  * def compute(hashes):
  *     '''Compute the simhash of a vector of hashes.'''
  *     return c_compute(hashes)             # <<<<<<<<<<<<<<
- * 
+ *
  * def find_all(hashes, number_of_blocks, different_bits):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -1132,7 +1132,7 @@
 
   /* "simhash/simhash.pyx":12
  *     return struct.unpack('>Q', hashlib.md5(obj).digest()[0:8])[0] & 0xFFFFFFFFFFFFFFFF
- * 
+ *
  * def compute(hashes):             # <<<<<<<<<<<<<<
  *     '''Compute the simhash of a vector of hashes.'''
  *     return c_compute(hashes)
@@ -1151,7 +1151,7 @@
 
 /* "simhash/simhash.pyx":16
  *     return c_compute(hashes)
- * 
+ *
  * def find_all(hashes, number_of_blocks, different_bits):             # <<<<<<<<<<<<<<
  *     '''
  *     Find the set of all matches within the provided vector of hashes.
@@ -1275,7 +1275,7 @@
 
   /* "simhash/simhash.pyx":16
  *     return c_compute(hashes)
- * 
+ *
  * def find_all(hashes, number_of_blocks, different_bits):             # <<<<<<<<<<<<<<
  *     '''
  *     Find the set of all matches within the provided vector of hashes.
@@ -1376,7 +1376,7 @@
  *         """wrap(a: 'hash_t', b: 'hash_t') -> 'size_t'"""
  *         return f(a, b)             # <<<<<<<<<<<<<<
  *     return wrap
- * 
+ *
  */
   __Pyx_XDECREF(__pyx_r);
   __pyx_t_1 = __pyx_cur_scope->__pyx_v_f(__pyx_v_a, __pyx_v_b); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 67, __pyx_L1_error)
@@ -1406,7 +1406,7 @@
 }
 
 /* "cfunc.to_py":64
- * 
+ *
  * @cname("__Pyx_CFunc_size__t____hash__t____hash__t___to_py")
  * cdef object __Pyx_CFunc_size__t____hash__t____hash__t___to_py(size_t (*f)(hash_t, hash_t) except *):             # <<<<<<<<<<<<<<
  *     def wrap(hash_t a, hash_t b):
@@ -1444,8 +1444,8 @@
  *         """wrap(a: 'hash_t', b: 'hash_t') -> 'size_t'"""
  *         return f(a, b)
  *     return wrap             # <<<<<<<<<<<<<<
- * 
- * 
+ *
+ *
  */
   __Pyx_XDECREF(__pyx_r);
   __Pyx_INCREF(__pyx_v_wrap);
@@ -1453,7 +1453,7 @@
   goto __pyx_L0;
 
   /* "cfunc.to_py":64
- * 
+ *
  * @cname("__Pyx_CFunc_size__t____hash__t____hash__t___to_py")
  * cdef object __Pyx_CFunc_size__t____hash__t____hash__t___to_py(size_t (*f)(hash_t, hash_t) except *):             # <<<<<<<<<<<<<<
  *     def wrap(hash_t a, hash_t b):
@@ -1474,7 +1474,7 @@
 }
 
 /* "vector.from_py":49
- * 
+ *
  * @cname("__pyx_convert_vector_from_py_Simhash_3a__3a_hash_t")
  * cdef vector[X] __pyx_convert_vector_from_py_Simhash_3a__3a_hash_t(object o) except *:             # <<<<<<<<<<<<<<
  *     cdef vector[X] v
@@ -1547,7 +1547,7 @@
  *     for item in o:
  *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
  *     return v
- * 
+ *
  */
     __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_v_item); if (unlikely(__pyx_t_5 == -1LL && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)
     __pyx_v_v.push_back(__pyx_t_5);
@@ -1566,14 +1566,14 @@
  *     for item in o:
  *         v.push_back(X_from_py(item))
  *     return v             # <<<<<<<<<<<<<<
- * 
- * 
+ *
+ *
  */
   __pyx_r = __pyx_v_v;
   goto __pyx_L0;
 
   /* "vector.from_py":49
- * 
+ *
  * @cname("__pyx_convert_vector_from_py_Simhash_3a__3a_hash_t")
  * cdef vector[X] __pyx_convert_vector_from_py_Simhash_3a__3a_hash_t(object o) except *:             # <<<<<<<<<<<<<<
  *     cdef vector[X] v
@@ -1592,7 +1592,7 @@
 }
 
 /* "set.from_py":120
- * 
+ *
  * @cname("__pyx_convert_unordered_set_from_py_Simhash_3a__3a_hash_t")
  * cdef set[X] __pyx_convert_unordered_set_from_py_Simhash_3a__3a_hash_t(object o) except *:             # <<<<<<<<<<<<<<
  *     cdef set[X] s
@@ -1665,7 +1665,7 @@
  *     for item in o:
  *         s.insert(X_from_py(item))             # <<<<<<<<<<<<<<
  *     return s
- * 
+ *
  */
     __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_v_item); if (unlikely(__pyx_t_5 == -1LL && PyErr_Occurred())) __PYX_ERR(1, 123, __pyx_L1_error)
     __pyx_v_s.insert(__pyx_t_5);
@@ -1684,14 +1684,14 @@
  *     for item in o:
  *         s.insert(X_from_py(item))
  *     return s             # <<<<<<<<<<<<<<
- * 
- * 
+ *
+ *
  */
   __pyx_r = __pyx_v_s;
   goto __pyx_L0;
 
   /* "set.from_py":120
- * 
+ *
  * @cname("__pyx_convert_unordered_set_from_py_Simhash_3a__3a_hash_t")
  * cdef set[X] __pyx_convert_unordered_set_from_py_Simhash_3a__3a_hash_t(object o) except *:             # <<<<<<<<<<<<<<
  *     cdef set[X] s
@@ -1710,11 +1710,11 @@
 }
 
 /* "pair.to_py":180
- * 
+ *
  * @cname("__pyx_convert_pair_to_py_Simhash_3a__3a_hash_t____Simhash_3a__3a_hash_t")
  * cdef object __pyx_convert_pair_to_py_Simhash_3a__3a_hash_t____Simhash_3a__3a_hash_t(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
  *     return X_to_py(p.first), Y_to_py(p.second)
- * 
+ *
  */
 
 static PyObject *__pyx_convert_pair_to_py_Simhash_3a__3a_hash_t____Simhash_3a__3a_hash_t(std::pair<Simhash::hash_t,Simhash::hash_t>  const &__pyx_v_p) {
@@ -1729,8 +1729,8 @@
  * @cname("__pyx_convert_pair_to_py_Simhash_3a__3a_hash_t____Simhash_3a__3a_hash_t")
  * cdef object __pyx_convert_pair_to_py_Simhash_3a__3a_hash_t____Simhash_3a__3a_hash_t(const pair[X,Y]& p):
  *     return X_to_py(p.first), Y_to_py(p.second)             # <<<<<<<<<<<<<<
- * 
- * 
+ *
+ *
  */
   __Pyx_XDECREF(__pyx_r);
   __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 181, __pyx_L1_error)
@@ -1750,11 +1750,11 @@
   goto __pyx_L0;
 
   /* "pair.to_py":180
- * 
+ *
  * @cname("__pyx_convert_pair_to_py_Simhash_3a__3a_hash_t____Simhash_3a__3a_hash_t")
  * cdef object __pyx_convert_pair_to_py_Simhash_3a__3a_hash_t____Simhash_3a__3a_hash_t(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
  *     return X_to_py(p.first), Y_to_py(p.second)
- * 
+ *
  */
 
   /* function exit code */
@@ -1771,11 +1771,11 @@
 }
 
 /* "vector.to_py":67
- * 
+ *
  * @cname("__pyx_convert_vector_to_py_Simhash_3a__3a_match_t")
  * cdef object __pyx_convert_vector_to_py_Simhash_3a__3a_match_t(vector[X]& v):             # <<<<<<<<<<<<<<
  *     return [X_to_py(v[i]) for i in range(v.size())]
- * 
+ *
  */
 
 static PyObject *__pyx_convert_vector_to_py_Simhash_3a__3a_match_t(const std::vector<Simhash::match_t>  &__pyx_v_v) {
@@ -1792,8 +1792,8 @@
  * @cname("__pyx_convert_vector_to_py_Simhash_3a__3a_match_t")
  * cdef object __pyx_convert_vector_to_py_Simhash_3a__3a_match_t(vector[X]& v):
  *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
- * 
- * 
+ *
+ *
  */
   __Pyx_XDECREF(__pyx_r);
   __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
@@ -1811,11 +1811,11 @@
   goto __pyx_L0;
 
   /* "vector.to_py":67
- * 
+ *
  * @cname("__pyx_convert_vector_to_py_Simhash_3a__3a_match_t")
  * cdef object __pyx_convert_vector_to_py_Simhash_3a__3a_match_t(vector[X]& v):             # <<<<<<<<<<<<<<
  *     return [X_to_py(v[i]) for i in range(v.size())]
- * 
+ *
  */
 
   /* function exit code */
@@ -1977,7 +1977,7 @@
  * def unsigned_hash(bytes obj):
  *     '''Returns a hash suitable for use as a hash_t.'''
  *     return struct.unpack('>Q', hashlib.md5(obj).digest()[0:8])[0] & 0xFFFFFFFFFFFFFFFF             # <<<<<<<<<<<<<<
- * 
+ *
  * def compute(hashes):
  */
   __pyx_slice_ = PySlice_New(__pyx_int_0, __pyx_int_8, Py_None); if (unlikely(!__pyx_slice_)) __PYX_ERR(0, 10, __pyx_L1_error)
@@ -1997,8 +1997,8 @@
   __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_wrap, 65, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(1, 65, __pyx_L1_error)
 
   /* "simhash/simhash.pyx":8
- * 
- * 
+ *
+ *
  * def unsigned_hash(bytes obj):             # <<<<<<<<<<<<<<
  *     '''Returns a hash suitable for use as a hash_t.'''
  *     return struct.unpack('>Q', hashlib.md5(obj).digest()[0:8])[0] & 0xFFFFFFFFFFFFFFFF
@@ -2122,7 +2122,7 @@
   /* "simhash/simhash.pyx":1
  * import hashlib             # <<<<<<<<<<<<<<
  * import struct
- * 
+ *
  */
   __pyx_t_1 = __Pyx_Import(__pyx_n_s_hashlib, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
@@ -2132,7 +2132,7 @@
   /* "simhash/simhash.pyx":2
  * import hashlib
  * import struct             # <<<<<<<<<<<<<<
- * 
+ *
  * from simhash cimport compute as c_compute
  */
   __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
@@ -2141,8 +2141,8 @@
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
   /* "simhash/simhash.pyx":8
- * 
- * 
+ *
+ *
  * def unsigned_hash(bytes obj):             # <<<<<<<<<<<<<<
  *     '''Returns a hash suitable for use as a hash_t.'''
  *     return struct.unpack('>Q', hashlib.md5(obj).digest()[0:8])[0] & 0xFFFFFFFFFFFFFFFF
@@ -2155,7 +2155,7 @@
   /* "simhash/simhash.pyx":1
  * import hashlib             # <<<<<<<<<<<<<<
  * import struct
- * 
+ *
  */
   __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
@@ -2163,11 +2163,11 @@
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
   /* "vector.to_py":67
- * 
+ *
  * @cname("__pyx_convert_vector_to_py_Simhash_3a__3a_match_t")
  * cdef object __pyx_convert_vector_to_py_Simhash_3a__3a_match_t(vector[X]& v):             # <<<<<<<<<<<<<<
  *     return [X_to_py(v[i]) for i in range(v.size())]
- * 
+ *
  */
 
   /*--- Wrapped vars code ---*/
