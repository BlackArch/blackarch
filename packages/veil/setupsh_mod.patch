diff --git a/config/update.py b/config/update.py
index 75e360e..bf6ac9e 100755
--- a/config/update.py
+++ b/config/update.py
@@ -186,7 +186,7 @@ if __name__ == '__main__':
         else:
             options["OPERATING_SYSTEM"] = "Linux"
             options["TERMINAL_CLEAR"] = "clear"
-            msfpath = raw_input(" [>] Please enter the path of your metasploit installation: ")
+            msfpath = "/opt/metasploit"
             options["METASPLOIT_PATH"] = msfpath
             if os.path.isfile('/usr/bin/msfvenom'):
                 options["MSFVENOM_PATH"] = "/usr/bin/"
@@ -227,4 +227,4 @@ if __name__ == '__main__':
         print " [!] ERROR: PLATFORM NOT CURRENTLY SUPPORTED"
         sys.exit()
 
-    generateConfig(options)
\ No newline at end of file
+    generateConfig(options)
diff --git a/setup/setup.sh b/setup/setup.sh
index 250d13a..bf877ee 100755
--- a/setup/setup.sh
+++ b/setup/setup.sh
@@ -66,37 +66,37 @@ function ctrl_c() {
 
 # Environment checks
 func_check_env(){
-  # Check sudo dependency
-  which sudo >/dev/null 2>&-
-  if [ "$?" -ne "0" ]; then
-    echo ""
-    echo -e " ${RED}[ERROR]: This setup script requires sudo!${RESET}"
-    echo "          Please install and configure sudo then run this setup again."
-    echo "          Example: For Debian/Ubuntu: apt-get -y install sudo"
-    echo "                   For Fedora 22+: dnf -y install sudo"
-    exit 1
-  fi
-
-  # Double check install
-  if [ "${os}" != "kali" ] || [ "${os}" == "parrot" ]; then
-    echo -e "\n ${BOLD}[!] NON-KALI Users: Before you begin the install, make sure that you have"
-    echo -e "     the Metasploit-Framework installed before you proceed!${RESET}\n"
-  fi
-
-  if [ "${silent}" == "true" ]; then
-    echo -e "\n [?] ${BOLD}Are you sure you wish to install Veil-Evasion?${RESET}\n"
-    echo -e "     Continue with installation? ([${BOLD}y${RESET}]/[${GREEN}S${RESET}]ilent/[${BOLD}n${RESET}]o): ${GREEN}S${RESET}"
-  else
-    echo -e "\n [?] ${BOLD}Are you sure you wish to install Veil-Evasion?${RESET}\n"
-    read -p '     Continue with installation? ([y]/[s]ilent/[N]o): ' installveil
-    if [ "${installveil}" == 's' ]; then
-      silent=true
-    elif [ "${installveil}" != 'y' ]; then
-      echo -e "\n ${RED}[ERROR]: Installation aborted by user.${RESET}\n"
-      exit 1
-    fi
-  fi
-
+#  # Check sudo dependency
+#  which sudo >/dev/null 2>&-
+#  if [ "$?" -ne "0" ]; then
+#    echo ""
+#    echo -e " ${RED}[ERROR]: This setup script requires sudo!${RESET}"
+#    echo "          Please install and configure sudo then run this setup again."
+#    echo "          Example: For Debian/Ubuntu: apt-get -y install sudo"
+#    echo "                   For Fedora 22+: dnf -y install sudo"
+#    exit 1
+#  fi
+#
+#  # Double check install
+#  if [ "${os}" != "kali" ] || [ "${os}" == "parrot" ]; then
+#    echo -e "\n ${BOLD}[!] NON-KALI Users: Before you begin the install, make sure that you have"
+#    echo -e "     the Metasploit-Framework installed before you proceed!${RESET}\n"
+#  fi
+#
+#  if [ "${silent}" == "true" ]; then
+#    echo -e "\n [?] ${BOLD}Are you sure you wish to install Veil-Evasion?${RESET}\n"
+#    echo -e "     Continue with installation? ([${BOLD}y${RESET}]/[${GREEN}S${RESET}]ilent/[${BOLD}n${RESET}]o): ${GREEN}S${RESET}"
+#  else
+#    echo -e "\n [?] ${BOLD}Are you sure you wish to install Veil-Evasion?${RESET}\n"
+#    read -p '     Continue with installation? ([y]/[s]ilent/[N]o): ' installveil
+#    if [ "${installveil}" == 's' ]; then
+#      silent=true
+#    elif [ "${installveil}" != 'y' ]; then
+#      echo -e "\n ${RED}[ERROR]: Installation aborted by user.${RESET}\n"
+#      exit 1
+#    fi
+#  fi
+#
   func_package_deps
 
   # Check if (Wine) Python is already installed
@@ -120,13 +120,6 @@ func_check_env(){
     func_go_deps
   fi
 
-  # Check if autoit is installed
-  if [ -f "${winedrive}/Program Files/AutoIt3/AutoIt3.exe" ]; then
-    echo -e "\n\n [*] ${YELLOW}AutoIt is already installed... Skipping...${RESET}\n"
-  else
-    func_autoit_deps
-  fi
-
   # Finally, update the config
   if [ -f "/etc/veil/settings.py" ] && [ -d "${outputfolder}" ]; then
     echo -e "\n\n [*] ${YELLOW}Setttings already detected... Skipping...${RESET}\n"
@@ -139,79 +132,6 @@ func_check_env(){
 func_package_deps(){
   echo -e "\n\n [*] ${YELLOW}Initializing package installation${RESET}\n"
 
-  # Begin Wine install for multiple architectures
-  # Always install 32-bit support for 64-bit architectures
-
-  # Debian based distributions
-  if [ "${os}" == "ubuntu" ] || [ "${os}" == "debian" ] || [ "${os}" == "kali" ] || [ "${os}" == "parrot" ]; then
-    if [ "${silent}" == "true" ]; then
-      echo -e "\n\n [*] ${YELLOW}Silent Mode${RESET}: ${GREEN}Enabled${RESET}\n"
-      arg=" DEBIAN_FRONTEND=noninteractive"
-    fi
-
-    if [ "${arch}" == "x86_64" ]; then
-      echo -e "\n [*] ${YELLOW}Adding x86 architecture to x86_64 system for Wine${RESET}\n"
-      sudo dpkg --add-architecture i386
-      sudo apt-get -qq update
-
-      echo -e " [*] ${YELLOW}Installing Wine 32-bit and 64-bit binaries${RESET}"
-      if [ "${os}" != "ubuntu" ]; then
-        sudo ${arg} apt-get -y -qq install wine wine64 wine32
-      else # Special snowflakes... urghbuntu
-        sudo ${arg} apt-get -y -qq install wine wine1.6 wine1.6-i386
-      fi
-      tmp="$?"
-      if [ "${tmp}" -ne "0" ]; then
-        msg="Failed to install Wine... Exit code: ${tmp}"
-        errors="${errors}\n${msg}"
-        echo -e " ${RED}[ERROR] ${msg}${RESET}\n"
-      fi
-
-    elif [ "${arch}" == "x86" ] || [ "${arch}" == "i686" ]; then
-      sudo apt-get -qq update
-      sudo ${arg} apt-get -y -qq install wine32
-      tmp="$?"
-      if [ "${tmp}" -ne "0" ]; then
-        msg="Failed to install Wine... Exit code: ${tmp}"
-        errors="${errors}\n${msg}"
-        echo -e " ${RED}[ERROR] ${msg}${RESET}\n"
-      fi
-
-    else # Dead code. We really shouldn't end up here, but, you never know...
-      echo -e "${RED}[ERROR]: Architecture ${arch} is not supported!\n${RESET}"
-      exit 1
-    fi
-  # Red Hat based distributions
-  elif [ "${os}" == "fedora" ] || [ "${os}" == "rhel" ] || [ "${os}" == "centos" ]; then
-    echo -e "\n\n [*] ${YELLOW}Installing Wine 32-bit on x86_64 System${RESET}"
-    sudo dnf install -y wine.i686 wine
-    tmp="$?"
-    if [ "${tmp}" -ne "0" ]; then
-      msg="Failed to install Wine x86_64... Exit code: ${tmp}"
-      errors="${errors}\n${msg}"
-      echo -e " ${RED}[ERROR] ${msg}${RESET}\n"
-    fi
-  elif [ "${os}" == "arch" ]; then
-    if grep -Fxq "#[multilib]" /etc/pacman.conf; then
-      echo "[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
-    fi
-
-    sudo pacman -Syu ${args} --needed --noconfirm wine wine-mono wine_gecko git
-    tmp="$?"
-    if [ "${tmp}" -ne "0" ]; then
-      msg="Failed to install Wine x86_64... Exit code: ${tmp}"
-      errors="${errors}\n${msg}"
-      echo -e " ${RED}[ERROR] ${msg}${RESET}\n"
-    fi
-  fi
-
-  # Clone down the required install files
-  git clone https://github.com/Veil-Framework/VeilDependencies.git
-  cd VeilDependencies
-  mv * ..
-  cd ..
-  rm -rf VeilDependencies
-
   # Setup Wine prefices
   # Because Veil currently only supports Win32 binaries, we have to set the WINEARCH PREFIX
   # to use Win32. This is a potential issue for the future when Veil has windows 64-bit
@@ -246,10 +166,10 @@ func_package_deps(){
     if [ "${arch}" == "x86_64" ]; then
       echo -e " [*] ${YELLOW}Initializing Veil's Wine environment...${RESET}"
       if [ "${winebootexists}" == "true" ]; then
-        sudo -u "${trueuser}" mkdir -p "${winedrive}/"
-        sudo -u "${trueuser}" WINEARCH=win32 WINEPREFIX="${winedir}" wineboot -u
+         mkdir -p "${winedrive}/"
+         WINEARCH=win32 WINEPREFIX="${winedir}" wineboot -u
       else
-        sudo -u "${trueuser}" WINEARCH=win32 WINEPREFIX="${winedir}" wine cmd.exe /c ipconfig >/dev/null
+         WINEARCH=win32 WINEPREFIX="${winedir}" wine cmd.exe /c ipconfig >/dev/null
       fi
 
       # Sorta-kinda check for the existence of the wine drive
@@ -266,8 +186,7 @@ func_package_deps(){
       fi
     elif [ "${arch}" == "x86" ] || [ "${arch}" == "i686" ]; then
       echo -e " [*] ${YELLOW}Initializing Veil's Wine environment...${RESET}\n"
-      sudo -u "${trueuser}" WINEPREFIX="${winedir}" wineboot -u
-      echo sudo -u "${trueuser}" WINEPREFIX="${winedir}" wineboot -u
+      WINEPREFIX="${winedir}" wineboot -u
       if [ -d "${winedrive}" ]; then
         echo -e " [*] ${GREEN}Veil Wine environment successfully created!${RESET}\n"
       else
@@ -281,40 +200,12 @@ func_package_deps(){
       fi
     fi
   fi
-
-  # Start dependency install
-  echo -e "\n\n [*] ${YELLOW}Installing dependencies${RESET}"
-  if [ "${os}" == "debian" ] || [ "${os}" == "kali" ] || [ "${os}" == "parrot" ] || [ "${os}" == "ubuntu" ]; then
-    sudo ${arg} apt-get -y install mingw-w64 monodoc-browser monodevelop mono-mcs wine unzip ruby golang wget git \
-      python python-crypto python-pefile python-pip ca-certificates python3-pip #ttf-mscorefonts-installer
-
-  elif [ "${os}" == "fedora" ] || [ "${os}" == "rhel" ] || [ "${os}" == "centos" ]; then
-    sudo ${arg} dnf -y install mingw64-binutils mingw64-cpp mingw64-gcc mingw64-gcc-c++ mono-tools-monodoc monodoc \
-      monodevelop mono-tools mono-core wine unzip ruby golang wget git python python-crypto python-pefile \
-      python-pip ca-certificates msttcore-fonts-installer python3-pip
-
-  elif [ "${os}" ==  "arch" ]; then
-    sudo pacman -Sy ${arg} --needed mingw-w64-binutils mingw-w64-crt mingw-w64-gcc mingw-w64-headers mingw-w64-winpthreads \
-      mono mono-tools mono-addins python2-pip wget unzip ruby python python2 python-crypto gcc-go ca-certificates base-devel python3-pip
+  # elif [ "${os}" ==  "arch" ]; then
+    # sudo pacman -Sy ${arg} --needed mingw-w64-binutils mingw-w64-crt mingw-w64-gcc mingw-w64-headers mingw-w64-winpthreads \
+      # mono mono-tools mono-addins python2-pip wget unzip ruby python python2 python-crypto gcc-go ca-certificates base-devel
     # Install pefile for python2 using pip, rather than via AUR as the package is currently broken.
-    sudo pip2 install pefile
-  fi
-  tmp="$?"
-  if [ "${tmp}" -ne "0" ]; then
-    msg="Failed to install dependencies... Exit code: ${tmp}"
-    errors="${errors}\n${msg}"
-    echo -e " ${RED}[ERROR] ${msg}${RESET}\n"
-  fi
-
-  if [ "${os}" == "kali" ] || [ "${os}" == "parrot" ]; then
-    sudo ${arg} apt-get -y install metasploit-framework
-    tmp="$?"
-    if [ "${tmp}" -ne "0" ]; then
-      msg="Failed to install dependencies (Metasploit-Framework)... Exit code: ${tmp}"
-      errors="${errors}\n${msg}"
-      echo -e " ${RED}[ERROR] ${msg}${RESET}\n"
-    fi
-  fi
+    # sudo pip2 install pefile
+  # fi
 }
 
 # Install Python dependencies
@@ -330,15 +221,14 @@ func_python_deps(){
   echo -e "\n [*] ${YELLOW}Installing (Wine) Python...${RESET}"
   echo -e "${BOLD} [*] Next -> Next -> Next -> Finished! ...Overwrite if prompt. Use default values.${RESET}"
   sleep 1s
-  [ "${silent}" == "true" ] && arg=" TARGETDIR=C:\Python34 ALLUSERS=1 /q /norestart"
-  sudo -u "${trueuser}" WINEPREFIX="${winedir}" wine msiexec /i "${rootdir}/setup/python-3.4.4.msi" ${arg}
+  arg=" TARGETDIR=C:\Python34 ALLUSERS=1 /q /norestart"
+  WINEPREFIX="${winedir}" wine msiexec /i "${rootdir}/setup/python-3.4.4.msi" ${arg}
   tmp="$?"
   if [ "${tmp}" -ne "0" ]; then
     msg="Failed to install (Wine) Python 3.4.4... Exit code: ${tmp}"
     errors="${errors}\n${msg}"
     echo -e " ${RED}[ERROR] ${msg}${RESET}\n"
   fi
-  pip3 install pycrypto
 
   # Cool down
   sleep 3s
@@ -351,14 +241,14 @@ func_python_deps(){
   for FILE in pywin32-220.win32-py3.4.exe pycrypto-2.6.1.win32-py3.4.exe; do
     echo -e "\n\n [*] ${YELLOW}Installing (Wine) Python's ${FILE}...${RESET}"
     if [ "${silent}" == "true" ]; then
-      sudo -u "${trueuser}" unzip -q -o "${FILE}"
-      sudo -u "${trueuser}" cp -rf PLATLIB/* "${winedrive}/Python34/Lib/site-packages/"
-      [ -e "SCRIPTS" ] && sudo -u "${trueuser}" cp -rf SCRIPTS/* "${winedrive}/Python34/Scripts/"
+      unzip -q -o "${FILE}"
+      cp -rf PLATLIB/* "${winedrive}/Python34/Lib/site-packages/"
+      [ -e "SCRIPTS" ] && cp -rf SCRIPTS/* "${winedrive}/Python34/Scripts/"
       rm -rf "PLATLIB/" "SCRIPTS/"
     else
       echo -e " [*] ${BOLD}Next -> Next -> Next -> Finished! ...Overwrite if prompt. Use default values.${RESET}"
       sleep 1s
-      sudo -u "${trueuser}" WINEPREFIX="${winedir}" wine "${FILE}"
+       WINEPREFIX="${winedir}" wine "${FILE}"
       tmp="$?"
       if [ "${tmp}" -ne "0" ]; then
         msg="Failed to install ${FILE}... Exit code: ${tmp}"
@@ -371,29 +261,11 @@ func_python_deps(){
   popd >/dev/null
 
   # Install Python (OS) extra setup files (PyInstaller)
-  echo -e "\n\n [*] ${YELLOW}Installing Python's PyInstaller${RESET}"
-  [[ "${silent}" == "true" ]] && arg=" DEBIAN_FRONTEND=noninteractive"
-  if [ -f "/opt/veil/PyInstaller-3.2.1/pyinstaller.py" ]; then
-    echo -e "\n\n [*] ${YELLOW}PyInstaller v3.2 is already installed... Skipping...${RESET}\n"
-  else
-    # Install PyInstaller now
-    file="${rootdir}/setup/PyInstaller-3.2.1.tar"
-    shasum="$(openssl dgst -sha256 "${file}" | cut -d' ' -f2)"
-    if [ "${shasum}" == "4727314ddf95bfe4aed28b3b98e0175d469a36aff5eb7e2af3c3d2fffd662d2d" ]; then
-      sudo rm -rf /opt/veil/PyInstaller-*
-      sudo mkdir -p /opt/veil
-      sudo tar -C /opt/veil -xvf "${file}"
-    else
-      msg="Bad hash for PyInstaller.tar.gz!"
-      errors="${errors}\n${msg}"
-      echo -e " ${RED}[ERROR] ${msg}${RESET}\n"
-    fi
-  fi
 
   # Use wine based pip to install dependencies
-  sudo -u "${trueuser}" WINEPREFIX="${winedir}" wine "${winedir}/drive_c/Python34/python.exe" "-m" "pip" "install" "--upgrade" "pip"
-  sudo -u "${trueuser}" WINEPREFIX="${winedir}" wine "${winedir}/drive_c/Python34/python.exe" "-m" "pip" "install" "future"
-  sudo -u "${trueuser}" WINEPREFIX="${winedir}" wine "${winedir}/drive_c/Python34/python.exe" "-m" "pip" "install" "pefile"
+  WINEPREFIX="${winedir}" wine "${winedir}/drive_c/Python34/python.exe" "-m" "pip" "install" "--upgrade" "pip"
+  WINEPREFIX="${winedir}" wine "${winedir}/drive_c/Python34/python.exe" "-m" "pip" "install" "future"
+  WINEPREFIX="${winedir}" wine "${winedir}/drive_c/Python34/python.exe" "-m" "pip" "install" "pefile"
 }
 
 # Install Go dependencies (Requires v1.2 or higher)
@@ -436,8 +308,9 @@ func_go_deps(){
       fi
     fi
     export GOROOT=/usr/local/go
-    sudo rm -f /usr/bin/go
-    sudo ln -s /usr/local/go/bin/go /usr/bin/go
+    # wtf?
+    # sudo rm -f /usr/bin/go
+    # sudo ln -s /usr/local/go/bin/go /usr/bin/go
   fi
 
   # Done
@@ -447,7 +320,7 @@ func_go_deps(){
 func_autoit_deps(){
   echo -e "\n [*] ${YELLOW}Initializing AutoIT installation...${RESET}\n"
   [ "${silent}" == "true" ] && arg=" /S"
-  sudo -u "${trueuser}" WINEPREFIX="${winedir}" wine "${rootdir}/setup/autoit-v3-setup.exe" ${arg}
+   WINEPREFIX="${winedir}" wine "${rootdir}/setup/autoit-v3-setup.exe" ${arg}
 }
 
 # Install (Wine) Ruby dependencies
@@ -460,10 +333,10 @@ func_ruby_deps(){
   echo -e "\n [*] ${YELLOW}Installing (Wine) Ruby & dependencies${RESET}"
   echo -e " [*] ${BOLD}Next -> Next -> Next -> Finished! ...Overwrite if prompt. Use default values.${RESET}"
   sleep 1s
-  sudo -u "${trueuser}" mkdir -p "${winedrive}/Ruby187/lib/ruby/gems/1.8/"
+  mkdir -p "${winedrive}/Ruby187/lib/ruby/gems/1.8/"
 
   [ "${silent}" == "true" ] && arg=" /silent"
-  sudo -u "${trueuser}" WINEPREFIX="${winedir}" wine "${rootdir}/setup/rubyinstaller-1.8.7-p371.exe" ${arg}
+  WINEPREFIX="${winedir}" wine "${rootdir}/setup/rubyinstaller-1.8.7-p371.exe" ${arg}
   tmp="$?"
   if [ "${tmp}" -ne "0" ]; then
     msg="Failed to install (Wine) Ruby.exe... Exit code: ${tmp}"
@@ -480,12 +353,12 @@ func_ruby_deps(){
   prefix="Z:"
   gempath=${gempath////$replace}
   gempath=$prefix$gempath
-  echo "$gempath install --force --local ocra-1.3.6.gem" > ocrainstall.bat
-  sudo -u "${trueuser}" WINEPREFIX="${winedir}" wine cmd /c ocrainstall.bat
+  echo "$gempath install --force --local ocra-1.3.6.gem" > "$winedrive/"ocrainstall.bat
+  WINEPREFIX="${winedir}" wine cmd /c "c:\ocrainstall.bat"
   
   # Unzip the Ruby dependencies
   echo -e "\n [*] ${YELLOW}Extracting (Wine) Ruby dependencies...${RESET}\n"
-  sudo -u "${trueuser}" unzip -q -o -d "${winedrive}/Ruby187/lib/ruby/gems/1.8/" "${rootdir}/setup/ruby_gems-1.8.zip"
+  unzip -q -o -d "${winedrive}/Ruby187/lib/ruby/gems/1.8/" "${rootdir}/setup/ruby_gems-1.8.zip"
 
   popd >/dev/null
 }
@@ -508,7 +381,7 @@ func_update_config(){
     echo -e " [*] ${YELLOW}Detected current Veil-Framework settings file. Removing...${RESET}\n"
     sudo rm -f /etc/veil/settings.py
   fi
-  sudo -u "${trueuser}" sudo python2 update.py
+  sudo python2 update.py
 
   mkdir -p "${outputfolder}"
 
@@ -537,44 +410,6 @@ if [ "${arch}" != "x86" ] && [ "${arch}" != "i686" ] && [ "${arch}" != "x86_64"
   exit 1
 fi
 
-# Check OS
-if [ "${os}" == "kali" ]; then
-  echo -e " [I] ${YELLOW}Kali Linux ${version} ${arch} detected...${RESET}\n"
-elif [ "${os}" == "parrot" ]; then
-  echo -e " [I] ${YELLOW}Parrot Security ${version} ${arch} detected...${RESET}\n"
-elif [ "${os}" == "ubuntu" ]; then
-  version="$(awk -F '["=]' '/^VERSION_ID=/ {print $3}' /etc/os-release 2>&- | cut -d'.' -f1)"
-  echo -e " [I] ${YELLOW}Ubuntu ${version} ${arch} detected...${RESET}\n"
-  if [[ "${version}" -lt "15" ]]; then
-    echo -e " ${RED}[ERROR]: Veil-Evasion is only supported On Ubuntu 15.10 or higher!${RESET}\n"
-    exit 1
-  fi
-elif [ "${os}" == "debian" ]; then
-  version="$(awk -F '["=]' '/^VERSION_ID=/ {print $3}' /etc/os-release 2>&- | cut -d'.' -f1)"
-  if [ "${version}" -lt 8 ]; then
-    echo -e " ${RED}[ERROR]: ${RED}Veil-Evasion is only supported on Debian 8 (Jessie) or higher!${RESET}\n"
-    exit 1
-  fi
-elif [ "${os}" == "fedora" ]; then
-  echo -e " [I] ${YELLOW}Fedora ${version} ${arch} detected...${RESET}\n"
-  if [[ "${version}" -lt "22" ]]; then
-    echo -e " ${RED}[ERROR]: Veil-Evasion is only supported on Fedora 22 or higher!${RESET}\n"
-    exit 1
-  fi
-else
-  os="$(awk -F '["=]' '/^ID=/ {print $2}' /etc/os-release 2>&- | cut -d'.' -f1)"
-  if [ "${os}" == "arch" ]; then
-    echo -e " [I] ${YELLOW}Arch Linux ${arch} detected...${RESET}\n"
-  elif [ "${os}" == "debian" ]; then
-    echo -e " [!] ${RED}Debian Linux sid/TESTING ${arch} *possibly* detected..."
-    echo -e "     If you are not currently running Debian Testing, you should exit this installer!${RESET}\n"
-  else
-    echo -e " [ERROR] ${RED}Unable to determine OS information. Exiting...${RESET}\n"
-    exit 1
-  fi
-fi
-
-# Trap ctrl-c
 trap ctrl_c INT
 
 # Menu case statement
