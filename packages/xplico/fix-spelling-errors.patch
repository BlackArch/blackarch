From: Kali Developers <devel@kali.org>
Date: Mon, 19 Aug 2019 09:08:03 +0200
Subject: Fix spelling errors found by lintian

---
 capt_dissectors/capture.c            |  6 +++---
 common/dis_mod.c                     | 18 +++++++++---------
 common/flow.c                        |  4 ++--
 common/log.c                         |  4 ++--
 common/prot.c                        |  2 +-
 dispatch/dispatch.c                  | 24 ++++++++++++------------
 dispatch/gearth.c                    |  2 +-
 dispatch/lite/lite.c                 |  4 ++--
 dispatch/ximysql/ximysql.c           | 12 ++++++------
 dissectors/dns_ca/dns.c              |  2 +-
 dissectors/http/http.c               |  6 +++---
 dissectors/imap/imap.c               |  6 +++---
 dissectors/ipp/ipp.c                 |  4 ++--
 dissectors/ipsec_ca/ipsec_analysis.c |  2 +-
 dissectors/irc/irc.c                 |  2 +-
 dissectors/l2tp/l2tp.c               |  2 +-
 dissectors/nntp/nntp.c               |  6 +++---
 dissectors/paltalk/paltalk.c         |  6 +++---
 dissectors/pop/pop.c                 |  4 ++--
 dissectors/pop/pop.h                 |  2 +-
 dissectors/smtp/smtp.c               |  2 +-
 dissectors/smtp/smtp.h               |  2 +-
 dissectors/tcp_ca/tcp_analysis.c     |  2 +-
 dissectors/udp_ca/udp_analysis.c     |  2 +-
 dissectors/vlan/vlan.c               |  2 +-
 manipulators/core/mmain.c            |  4 ++--
 system/dema/dema.c                   | 18 +++++++++---------
 xplico.c                             |  8 ++++----
 28 files changed, 79 insertions(+), 79 deletions(-)

diff --git a/capt_dissectors/capture.c b/capt_dissectors/capture.c
index 781848a..85f08e9 100644
--- a/capt_dissectors/capture.c
+++ b/capt_dissectors/capture.c
@@ -77,7 +77,7 @@ int CapInit(const char *file_cfg, const char *cap)
                 res = sscanf(param, CFG_PAR_MODULES_DIR"=%s %s", module_dir, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -89,13 +89,13 @@ int CapInit(const char *file_cfg, const char *cap)
                 logm = LV_BASE;
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                     logm |= CfgParLogMask(mask, nl);
                 }
                 else {
-                    LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, buffer);
+                    LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, buffer);
                     return -1;
                 }
                 /* set mask */
diff --git a/common/dis_mod.c b/common/dis_mod.c
index 84a0f38..66c3a00 100644
--- a/common/dis_mod.c
+++ b/common/dis_mod.c
@@ -330,7 +330,7 @@ int DisModLoad(char *file_cfg)
                 res = sscanf(param, CFG_PAR_MODULES_DIR"=%s %s", module_dir, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -344,7 +344,7 @@ int DisModLoad(char *file_cfg)
                 res = sscanf(param, CFG_PAR_TMP_DIR_PATH"=%s %s", tmp_dir, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -360,7 +360,7 @@ int DisModLoad(char *file_cfg)
     }
     else {
         if (mkdir(tmp_dir, 0x01FF) == -1 && errno != EEXIST) {
-            LogPrintf(LV_ERROR, "No writable permision");
+            LogPrintf(LV_ERROR, "No writable permission");
             return -1;
         }
     }
@@ -386,7 +386,7 @@ int DisModLoad(char *file_cfg)
                         /* log mask */
                         res = strncmp(bufcpy, CFG_PAR_MODULE_LOG, strlen(CFG_PAR_MODULE_LOG));
                         if (res != 0) {
-                            LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                            LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                             return -1;
                         }
                         param = strstr(buffer, CFG_PAR_MODULE_LOG);
@@ -394,13 +394,13 @@ int DisModLoad(char *file_cfg)
                         logm = LV_BASE;
                         if (res > 0) {
                             if (res == 2 && !CfgParIsComment(bufcpy)) {
-                                LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                                LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                                 return -1;
                             }
                             logm |= CfgParLogMask(mask, nl);
                         }
                         else {
-                            LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, buffer);
+                            LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, buffer);
                             return -1;
                         }
                         /* new module */
@@ -701,7 +701,7 @@ int ProtDep(proto_dep *ppdep)
     if (ppdep->op == FT_OP_REX) {
         /* compile regular expression */
         if (regcomp(&(prot_tbl[prot_ins].dep[dep_n].opd), ppdep->val.str, REG_ICASE) != 0) {
-            LogPrintf(LV_ERROR, "Regular expression errror (%s) in %s dissector", ppdep->val.str, prot_tbl[prot_ins].name);
+            LogPrintf(LV_ERROR, "Regular expression error (%s) in %s dissector", ppdep->val.str, prot_tbl[prot_ins].name);
             return -1;
         }
     }
@@ -946,7 +946,7 @@ int ManipTmpDir(char *file_cfg)
                 res = sscanf(param, CFG_PAR_TMP_DIR_PATH"=%s %s", tmp_dir, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error. Unknow param: %s", bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error. Unknown param: %s", bufcpy);
                         return -1;
                     }
                 }
@@ -957,7 +957,7 @@ int ManipTmpDir(char *file_cfg)
 
     if (tmp_dir[0] != '\0') {
         if (mkdir(tmp_dir, 0x01FF) == -1 && errno != EEXIST) {
-            LogPrintf(LV_ERROR, "No writable permision");
+            LogPrintf(LV_ERROR, "No writable permission");
             return -1;
         }
     }
diff --git a/common/flow.c b/common/flow.c
index dcd394e..1ab0c05 100644
--- a/common/flow.c
+++ b/common/flow.c
@@ -1064,7 +1064,7 @@ int FlowSetElab(int flow_id, int fthd_id)
 
 #ifdef XPL_CHECK_CODE
     if (flow_tbl[flow_id].elab == TRUE) {
-        LogPrintf(LV_OOPS, "flow (%s) alrady in elaboration.", flow_tbl[flow_id].name);
+        LogPrintf(LV_OOPS, "flow (%s) already in elaboration.", flow_tbl[flow_id].name);
         ProtStackFrmDisp(flow_tbl[flow_id].stack, TRUE);
     }
 #endif
@@ -1115,7 +1115,7 @@ int FlowSetName(int flow_id, int prot_id)
 
 #ifdef XPL_CHECK_CODE
     if (flow_tbl[flow_id].name[0] != '\0') {
-        LogPrintf(LV_OOPS, "flow (%d) have alrady a name (%s).", flow_id, flow_tbl[flow_id].name);
+        LogPrintf(LV_OOPS, "flow (%d) have already a name (%s).", flow_id, flow_tbl[flow_id].name);
         ProtStackFrmDisp(flow_tbl[flow_id].stack, TRUE);
     }
 #endif
diff --git a/common/log.c b/common/log.c
index 82b257c..c3f65ab 100644
--- a/common/log.c
+++ b/common/log.c
@@ -386,7 +386,7 @@ int LogDirName(char *file_cfg)
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
                         fclose(fp);
-                        printf("error: Config param error in line %d. Unknow param: %s\n", nl, bufcpy);
+                        printf("error: Config param error in line %d. Unknown param: %s\n", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -398,7 +398,7 @@ int LogDirName(char *file_cfg)
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
                         fclose(fp);
-                        printf("error: Config param error in line %d. Unknow param: %s\n", nl, bufcpy);
+                        printf("error: Config param error in line %d. Unknown param: %s\n", nl, bufcpy);
                         return -1;
                     }
                 }
diff --git a/common/prot.c b/common/prot.c
index aaf5fd1..4e3fe1d 100644
--- a/common/prot.c
+++ b/common/prot.c
@@ -1616,7 +1616,7 @@ int ProtInit(const char *file_cfg)
                 res = sscanf(param, CFG_PAR_FLOW_TIMEOUT"=%lu %s", &to, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        printf("error: Config param error in line %d. Unknow param: %s\n", nl, bufcpy);
+                        printf("error: Config param error in line %d. Unknown param: %s\n", nl, bufcpy);
                         return -1;
                     }
                     fto = to;
diff --git a/dispatch/dispatch.c b/dispatch/dispatch.c
index 6fc4826..6c48c22 100644
--- a/dispatch/dispatch.c
+++ b/dispatch/dispatch.c
@@ -188,7 +188,7 @@ int DispatchInit(const char *file_cfg)
                 res = sscanf(param, CFG_PAR_MODULES_DIR"=%s %s", module_dir, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -206,7 +206,7 @@ int DispatchInit(const char *file_cfg)
                         /* log mask */
                         res = strncmp(bufcpy, CFG_PAR_MODULE_LOG, strlen(CFG_PAR_MODULE_LOG));
                         if (res != 0) {
-                            LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                            LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                             return -1;
                         }
                         param = strstr(param, CFG_PAR_MODULE_LOG);
@@ -214,13 +214,13 @@ int DispatchInit(const char *file_cfg)
                         logm = LV_BASE;
                         if (res > 0) {
                             if (res == 2 && !CfgParIsComment(bufcpy)) {
-                                LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                                LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                                 return -1;
                             }
                             logm |= CfgParLogMask(mask, nl);
                         }
                         else {
-                            LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, buffer);
+                            LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, buffer);
                             return -1;
                         }
                         /* set mask */
@@ -235,7 +235,7 @@ int DispatchInit(const char *file_cfg)
                 res = sscanf(param, CFG_PAR_DISPATCH_PARAL"=%i %s", &val, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                     else {
@@ -282,7 +282,7 @@ int DispatchInit(const char *file_cfg)
                                 }
                             }
                             else {
-                                LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                                LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                                 return -1;
                             }
                         }
@@ -293,14 +293,14 @@ int DispatchInit(const char *file_cfg)
                                 if (res == 2 && !CfgParIsComment(bufcpy)) {
                                     res = strncmp(bufcpy, CFG_PAR_DISPATCH_MANIP_PORT, strlen(CFG_PAR_DISPATCH_MANIP_PORT));
                                     if (res != 0) {
-                                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                                         return -1;
                                     }
                                     param = strstr(param, CFG_PAR_DISPATCH_MANIP_PORT);
                                     res = sscanf(param, CFG_PAR_DISPATCH_MANIP_PORT"=%d %s", &manip_port, bufcpy);
                                     if (res > 0) {
                                         if (res == 2 && !CfgParIsComment(bufcpy)) {
-                                            LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, buffer);
+                                            LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, buffer);
                                             return -1;
                                         }
                                         /* inset manip in table */
@@ -324,23 +324,23 @@ int DispatchInit(const char *file_cfg)
                                         manip_num++;
                                     }
                                     else {
-                                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, buffer);
+                                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, buffer);
                                         return -1;
                                     }
                                 }
                                 else {
-                                    LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, buffer);
+                                    LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, buffer);
                                     return -1;
                                 }
                             }
                             else {
-                                LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, buffer);
+                                LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, buffer);
                                 return -1;
                             }
                         }
                     }
                     else {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, buffer);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, buffer);
                         return -1;
                     }
                 }
diff --git a/dispatch/gearth.c b/dispatch/gearth.c
index 1fe6cea..fae1741 100644
--- a/dispatch/gearth.c
+++ b/dispatch/gearth.c
@@ -48,7 +48,7 @@
 #define GEA_PRIVATE_NET    1 /* enable/disable introduction of provate information to kml file */
 #define GEA_SOURCE_INFO    0 /* enable/disable source info */
 #define GEA_EN_DNS         0 /* enable/disable dns map */
-#define GEA_EN_BASE        1 /* enable/disable unknow connections */
+#define GEA_EN_BASE        1 /* enable/disable unknown connections */
 
 static gea_info *volatile gea_list;
 static pthread_mutex_t gea_mux;       /* mutex to access at list */
diff --git a/dispatch/lite/lite.c b/dispatch/lite/lite.c
index b562520..c1e1045 100644
--- a/dispatch/lite/lite.c
+++ b/dispatch/lite/lite.c
@@ -1976,10 +1976,10 @@ static int DispMms(pei *ppei)
                     }
                 }
                 else if (cmpn->name != NULL) {
-                    sprintf(query, XS_QUERY_MMS_CONT_TEMPLATE, sess, pol, src_id, rid, "unknow", cmpn->name, cmpn->file_path, (unsigned long)cmpn->file_size);
+                    sprintf(query, XS_QUERY_MMS_CONT_TEMPLATE, sess, pol, src_id, rid, "unknown", cmpn->name, cmpn->file_path, (unsigned long)cmpn->file_size);
                 }
                 else {
-                    sprintf(query, XS_QUERY_MMS_CONT_TEMPLATE, sess, pol, src_id, rid, "unknow", "No name", cmpn->file_path, (unsigned long)cmpn->file_size);
+                    sprintf(query, XS_QUERY_MMS_CONT_TEMPLATE, sess, pol, src_id, rid, "unknown", "No name", cmpn->file_path, (unsigned long)cmpn->file_size);
                 }
                 if (DispQuery(query, NULL) != 0) {
                     printf("query: %s\n", query);
diff --git a/dispatch/ximysql/ximysql.c b/dispatch/ximysql/ximysql.c
index 3b1817c..e0a5d92 100644
--- a/dispatch/ximysql/ximysql.c
+++ b/dispatch/ximysql/ximysql.c
@@ -1968,10 +1968,10 @@ static int DispMms(pei *ppei)
                     }
                 }
                 else if (cmpn->name != NULL) {
-                    sprintf(query, XS_QUERY_MMS_CONT_TEMPLATE, sess, pol, src_id, rid, "unknow", cmpn->name, cmpn->file_path, (unsigned long)cmpn->file_size);
+                    sprintf(query, XS_QUERY_MMS_CONT_TEMPLATE, sess, pol, src_id, rid, "unknown", cmpn->name, cmpn->file_path, (unsigned long)cmpn->file_size);
                 }
                 else {
-                    sprintf(query, XS_QUERY_MMS_CONT_TEMPLATE, sess, pol, src_id, rid, "unknow", "No name", cmpn->file_path, (unsigned long)cmpn->file_size);
+                    sprintf(query, XS_QUERY_MMS_CONT_TEMPLATE, sess, pol, src_id, rid, "unknown", "No name", cmpn->file_path, (unsigned long)cmpn->file_size);
                 }
                 if (DispQuery(query, NULL) != 0) {
                     printf("query: %s\n", query);
@@ -5347,7 +5347,7 @@ static int ReadConfigFile(const char *path, dbconf *db_c)
                 res = sscanf(param, CFG_PAR_DB_HOST"=%s %s", db_c->host, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        printf("Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        printf("Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -5361,7 +5361,7 @@ static int ReadConfigFile(const char *path, dbconf *db_c)
                 res = sscanf(param, CFG_PAR_DB_NAME"=%s %s", db_c->name, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        printf("Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        printf("Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -5375,7 +5375,7 @@ static int ReadConfigFile(const char *path, dbconf *db_c)
                 res = sscanf(param, CFG_PAR_DB_USER"=%s %s", db_c->user, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        printf("Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        printf("Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -5389,7 +5389,7 @@ static int ReadConfigFile(const char *path, dbconf *db_c)
                 res = sscanf(param, CFG_PAR_DB_PASSWORD"=%s %s", db_c->password, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        printf("Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        printf("Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
diff --git a/dissectors/dns_ca/dns.c b/dissectors/dns_ca/dns.c
index 4d6c5f3..405c3e9 100644
--- a/dissectors/dns_ca/dns.c
+++ b/dissectors/dns_ca/dns.c
@@ -734,7 +734,7 @@ int DissecRegist(const char *file_cfg)
     ProtPeiComponent(&peic);
     
     peic.abbrev = "trace.receiv";
-    peic.desc = "Trace recived";
+    peic.desc = "Trace received";
     ProtPeiComponent(&peic);
 
     /* dissectors registration */
diff --git a/dissectors/http/http.c b/dissectors/http/http.c
index 302209e..ec2e78f 100644
--- a/dissectors/http/http.c
+++ b/dissectors/http/http.c
@@ -962,7 +962,7 @@ static http_com* HttpExtractHeader(http_com *rex, bool req)
                     else {
 #ifdef XPL_CHECK_CODE
                         if (rex->body_fp != NULL) {
-                            LogPrintf(LV_OOPS, "FP body dont closed 1");
+                            LogPrintf(LV_OOPS, "FP body don't closed 1");
                             exit(-1);
                         }
 #endif
@@ -987,7 +987,7 @@ static http_com* HttpExtractHeader(http_com *rex, bool req)
                     else {
 #ifdef XPL_CHECK_CODE
                         if (rex->body_fp != NULL) {
-                            LogPrintf(LV_OOPS, "FP body dont closed 2");
+                            LogPrintf(LV_OOPS, "FP body don't closed 2");
                             printf("%s\n", rex->hdr_buf);
                             *(char *)0 = 1;
                             exit(-1);
@@ -1978,7 +1978,7 @@ static packet* HttpDissector(int flow_id)
             }
 #ifdef XPL_CHECK_CODE
             if (inser->body_fp != NULL) {
-                LogPrintf(LV_OOPS, "FD body dont closed");
+                LogPrintf(LV_OOPS, "FD body don't closed");
                 ProtStackFrmDisp(http_pkt->stk, TRUE);
                 exit(-1);
             }
diff --git a/dissectors/imap/imap.c b/dissectors/imap/imap.c
index 6a06949..0fafcf8 100644
--- a/dissectors/imap/imap.c
+++ b/dissectors/imap/imap.c
@@ -637,7 +637,7 @@ static int ImapCmd(imap_msg *msg, packet *pkt)
                     msg->cmd_size = dim;
                 }
                 else {
-                    LogPrintf(LV_WARNING, "Command (%s) unknow", msg->cmd);
+                    LogPrintf(LV_WARNING, "Command (%s) unknown", msg->cmd);
                     if (pkt != NULL) {
                         ProtStackFrmDisp(pkt->stk, TRUE);
                     }
@@ -880,7 +880,7 @@ static int ImapRpl(imap_msg *msg, packet *pkt)
                         res_tag->complete = TRUE;
                     }
                     else {
-                        LogPrintf(LV_WARNING, "Response status unknow");
+                        LogPrintf(LV_WARNING, "Response status unknown");
                         return -1;
                     }
                     dim = end - lineend;
@@ -957,7 +957,7 @@ static int ImapRpl(imap_msg *msg, packet *pkt)
                 }
 #ifdef XPL_CHECK_CODE
                 else if (msg->multp_conv->clnt_dim == 0) {
-                    LogPrintf(LV_OOPS, "Client dimension unknow (fun:%s)", __FUNCTION__);
+                    LogPrintf(LV_OOPS, "Client dimension unknown (fun:%s)", __FUNCTION__);
                     exit(-1);
                 }
 #endif
diff --git a/dissectors/ipp/ipp.c b/dissectors/ipp/ipp.c
index 8af7460..417329b 100644
--- a/dissectors/ipp/ipp.c
+++ b/dissectors/ipp/ipp.c
@@ -173,7 +173,7 @@ static packet* IppDissector(packet *pkt)
             ver = IPP_1_1;
         }
         else {
-            LogPrintf(LV_WARNING, "Unknow version: %u.%u", buff[0], buff[1]);
+            LogPrintf(LV_WARNING, "Unknown version: %u.%u", buff[0], buff[1]);
             close(fd);
             /* free memory */
             HttpMsgRemove(msg);
@@ -184,7 +184,7 @@ static packet* IppDissector(packet *pkt)
         }
     }
     else {
-        LogPrintf(LV_WARNING, "Unknow version: %u.%u", buff[0], buff[1]);
+        LogPrintf(LV_WARNING, "Unknown version: %u.%u", buff[0], buff[1]);
         close(fd);
         /* free memory */
         HttpMsgRemove(msg);
diff --git a/dissectors/ipsec_ca/ipsec_analysis.c b/dissectors/ipsec_ca/ipsec_analysis.c
index 154b7b2..7082c12 100644
--- a/dissectors/ipsec_ca/ipsec_analysis.c
+++ b/dissectors/ipsec_ca/ipsec_analysis.c
@@ -398,7 +398,7 @@ int DissecRegist(const char *file_cfg)
     ProtPeiComponent(&peic);
     
     peic.abbrev = "trace.receiv";
-    peic.desc = "Trace recived";
+    peic.desc = "Trace received";
     ProtPeiComponent(&peic);
 
     peic.abbrev = "trace.img";
diff --git a/dissectors/irc/irc.c b/dissectors/irc/irc.c
index e4fcc93..9832725 100644
--- a/dissectors/irc/irc.c
+++ b/dissectors/irc/irc.c
@@ -1523,7 +1523,7 @@ static int IrcConnec(int flow_id, irc_priv *priv)
                             break;
 
                         case IRC_CMD_NONE:
-                            LogPrintf(LV_WARNING, "command unknow: %s", line);
+                            LogPrintf(LV_WARNING, "command unknown: %s", line);
                             break;
                             
                         default:
diff --git a/dissectors/l2tp/l2tp.c b/dissectors/l2tp/l2tp.c
index c27d35a..6ac28b3 100644
--- a/dissectors/l2tp/l2tp.c
+++ b/dissectors/l2tp/l2tp.c
@@ -45,7 +45,7 @@ static int proto_id;
 static void L2tpPrintHdr(l2tphdr *l2tp_h)
 {
     LogPrintf(LV_DEBUG, "Type: %i", l2tp_h->t);
-    LogPrintf(LV_DEBUG, "Lenght: %i", l2tp_h->l);
+    LogPrintf(LV_DEBUG, "Length: %i", l2tp_h->l);
     LogPrintf(LV_DEBUG, "Seq: %i", l2tp_h->s);
     LogPrintf(LV_DEBUG, "Offset: %i", l2tp_h->o);
     LogPrintf(LV_DEBUG, "Priority: %i", l2tp_h->p);
diff --git a/dissectors/nntp/nntp.c b/dissectors/nntp/nntp.c
index aeb60f2..389e79d 100644
--- a/dissectors/nntp/nntp.c
+++ b/dissectors/nntp/nntp.c
@@ -685,7 +685,7 @@ static int NntpCmd(nntp_msg *msg, packet *pkt)
 #endif
                 }
                 else {
-                    LogPrintf(LV_WARNING, "Command unknow");
+                    LogPrintf(LV_WARNING, "Command unknown");
                     //ProtStackFrmDisp(pkt->stk, TRUE);
                     //exit(-1);
                     return -1;
@@ -1098,13 +1098,13 @@ static int NntpRpl(nntp_msg *msg, packet *pkt)
                     }
                 }
                 else {
-                    LogPrintf(LV_WARNING, "Reply status unknow");
+                    LogPrintf(LV_WARNING, "Reply status unknown");
                     if (pkt != NULL)
                         ProtStackFrmDisp(pkt->stk, TRUE);
                     return -1;
                 }
 #else
-                LogPrintf(LV_WARNING, "Reply status unknow");
+                LogPrintf(LV_WARNING, "Reply status unknown");
                 if (pkt != NULL)
                     ProtStackFrmDisp(pkt->stk, TRUE);
                 return -1;
diff --git a/dissectors/paltalk/paltalk.c b/dissectors/paltalk/paltalk.c
index 6a97641..ec09aa8 100644
--- a/dissectors/paltalk/paltalk.c
+++ b/dissectors/paltalk/paltalk.c
@@ -516,7 +516,7 @@ static void PltkAddUser(pltk_chat_usr *new, pltk_con *pltk, unsigned long gid, t
         }
     }
     if (room == NULL) {
-        LogPrintf(LV_WARNING, "Room unknow!");
+        LogPrintf(LV_WARNING, "Room unknown!");
         return;
     }
     /* find user */
@@ -759,7 +759,7 @@ static int PltkRoomMsgIn(pltk_room_msg_in *msg_in, pltk_con *pltk, time_t start,
     if (room->msg_fp == NULL)
         return -1;
     /* find user nick name */
-    nick = "Unknow";
+    nick = "Unknown";
     for (usr=room->userl; usr != NULL; usr=usr->nxt) {
         if (usr->uid == msg_in->uid) {
             nick = usr->nick;
@@ -816,7 +816,7 @@ static int PltkImMsg(pltk_im_msg *msg_in, pltk_con *pltk, time_t start, unsigned
             }
         }
         if (nick == NULL)
-            nick = "Unknow";
+            nick = "Unknown";
         /* create pei */
         private = xmalloc(sizeof(pltk_private));
         if (private == NULL) {
diff --git a/dissectors/pop/pop.c b/dissectors/pop/pop.c
index e494fa4..2cf379e 100644
--- a/dissectors/pop/pop.c
+++ b/dissectors/pop/pop.c
@@ -503,7 +503,7 @@ static int PopCmd(pop_msg *msg, packet *pkt)
                     }
                 }
                 else {
-                    LogPrintf(LV_WARNING, "Command unknow");
+                    LogPrintf(LV_WARNING, "Command unknown");
                     //ProtStackFrmDisp(pkt->stk, TRUE);
                     return -1;
                 }
@@ -786,7 +786,7 @@ static int PopRpl(pop_msg *msg, packet *pkt)
                     }
                 }
                 else {
-                    LogPrintf(LV_WARNING, "Reply status unknow");
+                    LogPrintf(LV_WARNING, "Reply status unknown");
                     if (pkt != NULL)
                         ProtStackFrmDisp(pkt->stk, TRUE);
                     return -1;
diff --git a/dissectors/pop/pop.h b/dissectors/pop/pop.h
index 5498715..8d3fa29 100644
--- a/dissectors/pop/pop.h
+++ b/dissectors/pop/pop.h
@@ -58,7 +58,7 @@ enum _pop_cmd {
     POP_CMD_STLS,      /* RFC 2595 */
     POP_CMD_AUTH,      /* RFC 1734 */
     POP_CMD_XTND,      /* RFC 1082 */
-    POP_CMD_AUTH_CONT,  /* unknow command, continuation of AUTH */
+    POP_CMD_AUTH_CONT,  /* unknown command, continuation of AUTH */
     POP_CMD_NONE
 };
 
diff --git a/dissectors/smtp/smtp.c b/dissectors/smtp/smtp.c
index 6df26a3..e97aaca 100644
--- a/dissectors/smtp/smtp.c
+++ b/dissectors/smtp/smtp.c
@@ -587,7 +587,7 @@ static int SmtpRpl(smtp_msg *msg, packet *pkt)
                 line = msg->repl;
                 while (msg->st == SMTP_ST_NONE) {
                     if (line[3] != '-') {
-                        LogPrintf(LV_WARNING, "Reply unknow");
+                        LogPrintf(LV_WARNING, "Reply unknown");
                         /*printf("%s\n", msg->repl);*/
                         return -1;
                     }
diff --git a/dissectors/smtp/smtp.h b/dissectors/smtp/smtp.h
index d7b02c7..5a4d86f 100644
--- a/dissectors/smtp/smtp.h
+++ b/dissectors/smtp/smtp.h
@@ -59,7 +59,7 @@ enum _smtp_cmd {
     SMTP_CMD_AUTH,       /* RFC2554 */
     SMTP_CMD_STARTTLS,   /* RFC2487 */
     SMTP_CMD_BDAT,       /* RFC3030 */
-    SMTP_CMD_AUTH_CONT,  /* unknow command, continuation of AUTH */
+    SMTP_CMD_AUTH_CONT,  /* unknown command, continuation of AUTH */
     SMTP_CMD_NONE
 };
 
diff --git a/dissectors/tcp_ca/tcp_analysis.c b/dissectors/tcp_ca/tcp_analysis.c
index 6c4777d..510a83e 100644
--- a/dissectors/tcp_ca/tcp_analysis.c
+++ b/dissectors/tcp_ca/tcp_analysis.c
@@ -986,7 +986,7 @@ int DissecRegist(const char *file_cfg)
     ProtPeiComponent(&peic);
     
     peic.abbrev = "trace.receiv";
-    peic.desc = "Trace recived";
+    peic.desc = "Trace received";
     ProtPeiComponent(&peic);
 
     peic.abbrev = "trace.img";
diff --git a/dissectors/udp_ca/udp_analysis.c b/dissectors/udp_ca/udp_analysis.c
index 5d30a0f..66b3253 100644
--- a/dissectors/udp_ca/udp_analysis.c
+++ b/dissectors/udp_ca/udp_analysis.c
@@ -554,7 +554,7 @@ int DissecRegist(const char *file_cfg)
     ProtPeiComponent(&peic);
     
     peic.abbrev = "trace.receiv";
-    peic.desc = "Trace recived";
+    peic.desc = "Trace received";
     ProtPeiComponent(&peic);
 
     peic.abbrev = "trace.img";
diff --git a/dissectors/vlan/vlan.c b/dissectors/vlan/vlan.c
index c0ac38b..ee5dd80 100644
--- a/dissectors/vlan/vlan.c
+++ b/dissectors/vlan/vlan.c
@@ -61,7 +61,7 @@ static packet* VlanDissector(packet *pkt)
 
     if (proto <= IEEE_802_3_MAX_LEN) {
         /* to be implemented */
-        LogPrintf(LV_DEBUG, "Unknow protocol:%i ", proto);
+        LogPrintf(LV_DEBUG, "Unknown protocol:%i ", proto);
         PktFree(pkt);
         
         return NULL;
diff --git a/manipulators/core/mmain.c b/manipulators/core/mmain.c
index 7af398e..650a589 100644
--- a/manipulators/core/mmain.c
+++ b/manipulators/core/mmain.c
@@ -124,7 +124,7 @@ static int CoreLog(const char *file_cfg)
                 logm = LV_BASE;
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         fclose(fp);
 
                         return -1;
@@ -132,7 +132,7 @@ static int CoreLog(const char *file_cfg)
                     logm |= CfgParLogMask(mask, nl);
                 }
                 else {
-                    LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, buffer);
+                    LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, buffer);
                     fclose(fp);
 
                     return -1;
diff --git a/system/dema/dema.c b/system/dema/dema.c
index 14464e7..15105c1 100644
--- a/system/dema/dema.c
+++ b/system/dema/dema.c
@@ -698,7 +698,7 @@ static int ReadConfigFile(char *path, dbconf *db_c, char *root_dir, time_t *twpc
                 res = sscanf(param, CFG_PAR_PCAP_FILES_TIME"=%lu %s", twpcap, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -712,7 +712,7 @@ static int ReadConfigFile(char *path, dbconf *db_c, char *root_dir, time_t *twpc
                 res = sscanf(param, CFG_PAR_DB_TYPE"=%s %s", dbts, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -726,7 +726,7 @@ static int ReadConfigFile(char *path, dbconf *db_c, char *root_dir, time_t *twpc
                 res = sscanf(param, CFG_PAR_DB_FILE_NAME"=%s %s", db_c->file, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -741,7 +741,7 @@ static int ReadConfigFile(char *path, dbconf *db_c, char *root_dir, time_t *twpc
                 res = sscanf(param, CFG_PAR_ROOT_DIR"=%s %s", root_dir, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -755,7 +755,7 @@ static int ReadConfigFile(char *path, dbconf *db_c, char *root_dir, time_t *twpc
                 res = sscanf(param, CFG_SSL_CERT"=%s %s", cert, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -769,7 +769,7 @@ static int ReadConfigFile(char *path, dbconf *db_c, char *root_dir, time_t *twpc
                 res = sscanf(param, CFG_PAR_DB_HOST"=%s %s", db_c->host, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -783,7 +783,7 @@ static int ReadConfigFile(char *path, dbconf *db_c, char *root_dir, time_t *twpc
                 res = sscanf(param, CFG_PAR_DB_NAME"=%s %s", db_c->name, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -797,7 +797,7 @@ static int ReadConfigFile(char *path, dbconf *db_c, char *root_dir, time_t *twpc
                 res = sscanf(param, CFG_PAR_DB_USER"=%s %s", db_c->user, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
@@ -811,7 +811,7 @@ static int ReadConfigFile(char *path, dbconf *db_c, char *root_dir, time_t *twpc
                 res = sscanf(param, CFG_PAR_DB_PASSWORD"=%s %s", db_c->password, bufcpy);
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         return -1;
                     }
                 }
diff --git a/xplico.c b/xplico.c
index 8829387..729bb2d 100644
--- a/xplico.c
+++ b/xplico.c
@@ -141,7 +141,7 @@ static int CoreLog(const char *file_cfg)
                 logm = LV_BASE;
                 if (res > 0) {
                     if (res == 2 && !CfgParIsComment(bufcpy)) {
-                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, bufcpy);
+                        LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, bufcpy);
                         fclose(fp);
 
                         return -1;
@@ -149,7 +149,7 @@ static int CoreLog(const char *file_cfg)
                     logm |= CfgParLogMask(mask, nl);
                 }
                 else {
-                    LogPrintf(LV_ERROR, "Config param error in line %d. Unknow param: %s", nl, buffer);
+                    LogPrintf(LV_ERROR, "Config param error in line %d. Unknown param: %s", nl, buffer);
                     fclose(fp);
 
                     return -1;
@@ -312,7 +312,7 @@ int main(int argc, char *argv[])
             }
         }
         else {
-             printf("error: unable to open configuraion file \"%s\"\n", config_file);
+             printf("error: unable to open configuration file \"%s\"\n", config_file);
              return -1;
         }
     }
@@ -445,7 +445,7 @@ int main(int argc, char *argv[])
     i = 0;
     while (FthreadRunning() != 0) {
         if (end_to < time(NULL)) {
-            LogPrintf(LV_INFO, "Thread runnning: %d", FthreadRunning());
+            LogPrintf(LV_INFO, "Thread running: %d", FthreadRunning());
             LogPrintf(LV_INFO, "%d flow still open", FlowNumber());
             LogPrintf(LV_FATAL, "There is a dissector in infinite loop");
             FlowLoopLog();
