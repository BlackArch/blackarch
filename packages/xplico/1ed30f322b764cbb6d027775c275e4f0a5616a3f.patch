From 1ed30f322b764cbb6d027775c275e4f0a5616a3f Mon Sep 17 00:00:00 2001
From: Gianluca Costa <g.costa@xplico.org>
Date: Sun, 30 Jul 2017 11:35:12 +0200
Subject: [PATCH] upgrade to nDPI 2.0

---
 dissectors/tcp_ca/tcp_analysis.c  | 4 ++--
 dissectors/tcp_grbg/tcp_garbage.c | 2 +-
 dissectors/udp_ca/udp_analysis.c  | 4 ++--
 dissectors/udp_grbg/udp_garbage.c | 2 +-
 4 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/dissectors/tcp_ca/tcp_analysis.c b/dissectors/tcp_ca/tcp_analysis.c
index 25d2a71..e17ccc2 100644
--- a/dissectors/tcp_ca/tcp_analysis.c
+++ b/dissectors/tcp_ca/tcp_analysis.c
@@ -524,7 +524,7 @@ static int TcpCaDisFlow(tca_flow *ifw, packet *pkt)
             else {
                 ifw->l7prot_id = nDPIPacket(pkt, ifw->l7flow, ifw->l7dst, ifw->l7src, ifw->priv.ipv6);
             }
-            if (ifw->l7prot_id.protocol != NDPI_PROTOCOL_UNKNOWN) {
+            if (ifw->l7prot_id.app_protocol != NDPI_PROTOCOL_UNKNOWN) {
                 ifw->stage++;
                 ifw->l7prot_type = ndpi_protocol2name(ndpi, ifw->l7prot_id, ifw->buff, TCP_CA_LINE_MAX_SIZE);
             }
@@ -618,7 +618,7 @@ static packet *TcpCaDisFlowEnd(tca_flow *ifw)
         else
             ifw->l7prot_id = ndpi_guess_undetected_protocol(ndpi, IPPROTO_TCP, ifw->priv.ip_s.uint32, ifw->priv.ip_d.uint32, ifw->priv.port_s, ifw->priv.port_d);
         
-        if (ifw->l7prot_id.protocol != NDPI_PROTOCOL_UNKNOWN) {
+        if (ifw->l7prot_id.master_protocol != NDPI_PROTOCOL_UNKNOWN) {
             ifw->l7prot_type = ndpi_protocol2name(ndpi, ifw->l7prot_id, ifw->buff, TCP_CA_LINE_MAX_SIZE);
         }
         else {
diff --git a/dissectors/tcp_grbg/tcp_garbage.c b/dissectors/tcp_grbg/tcp_garbage.c
index 22cbddf..ad00a2f 100644
--- a/dissectors/tcp_grbg/tcp_garbage.c
+++ b/dissectors/tcp_grbg/tcp_garbage.c
@@ -675,7 +675,7 @@ packet *TcpGrbDissector(int flow_id)
                 else {
                     l7prot_id = nDPIPacket(pkt, l7flow, l7dst, l7src, ipv4);
                 }
-                if (l7prot_id.protocol != NDPI_PROTOCOL_UNKNOWN) {
+                if (l7prot_id.app_protocol != NDPI_PROTOCOL_UNKNOWN) {
                     stage++;
                     l7prot_type = ndpi_protocol2name(ndpi, l7prot_id, buff, TCP_CFG_LINE_MAX_SIZE);
                 }
diff --git a/dissectors/udp_ca/udp_analysis.c b/dissectors/udp_ca/udp_analysis.c
index e270eaf..d68bc1d 100644
--- a/dissectors/udp_ca/udp_analysis.c
+++ b/dissectors/udp_ca/udp_analysis.c
@@ -431,7 +431,7 @@ static packet *UdpCaDissector(int flow_id)
             else {
                 l7prot_id = nDPIPacket(pkt, l7flow, l7dst, l7src, ipv4);
             }
-            if (l7prot_id.protocol != NDPI_PROTOCOL_UNKNOWN) {
+            if (l7prot_id.master_protocol != NDPI_PROTOCOL_UNKNOWN) {
                 l7prot_type = ndpi_protocol2name(ndpi, l7prot_id, buff, UDP_CA_LINE_MAX_SIZE);
             }
         }
@@ -451,7 +451,7 @@ static packet *UdpCaDissector(int flow_id)
         else
             l7prot_id = ndpi_guess_undetected_protocol(ndpi, IPPROTO_UDP, priv.ip_s.uint32, priv.ip_d.uint32, priv.port_s, priv.port_d);
         
-        if (l7prot_id.protocol != NDPI_PROTOCOL_UNKNOWN) {
+        if (l7prot_id.master_protocol != NDPI_PROTOCOL_UNKNOWN) {
             l7prot_type = ndpi_protocol2name(ndpi, l7prot_id, buff, UDP_CA_LINE_MAX_SIZE);
         }
         else {
diff --git a/dissectors/udp_grbg/udp_garbage.c b/dissectors/udp_grbg/udp_garbage.c
index 0e9592b..e26fdc1 100644
--- a/dissectors/udp_grbg/udp_garbage.c
+++ b/dissectors/udp_grbg/udp_garbage.c
@@ -373,7 +373,7 @@ packet* UdpGrbDissector(int flow_id)
             else {
                 l7prot_id = nDPIPacket(pkt, l7flow, l7dst, l7src, ipv4);
             }
-            if (l7prot_id.protocol != NDPI_PROTOCOL_UNKNOWN) {
+            if (l7prot_id.master_protocol != NDPI_PROTOCOL_UNKNOWN) {
                 l7prot_type = ndpi_protocol2name(ndpi, l7prot_id, buff, UDP_CFG_LINE_MAX_SIZE);
             }
         }
