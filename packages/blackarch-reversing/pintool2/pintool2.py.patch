--- src/pintool2/pintool2.py	2018-07-26 21:22:00.668464420 +0200
+++ pintool2.py	2018-07-26 21:21:30.245131092 +0200
@@ -1,5 +1,5 @@
-#!/usr/bin/env python
-#coding: utf8 
+#!/usr/bin/env python2
+#coding: utf8
 #
 #prog_name= 'pintool2.py'
 #prog_version = '2.0'
@@ -14,7 +14,7 @@
 This version integrates an additional reverse order option to brute force password in reverse order (starts from the end).
 
 This tool can be useful for solving some reversing challenges in CTFs events.
-Implements the technique described here (http://shell-storm.org/blog/A-binary-analysis-count-me-if-you-can/). 
+Implements the technique described here (http://shell-storm.org/blog/A-binary-analysis-count-me-if-you-can/).
 """
 
 import sys
@@ -32,7 +32,7 @@
 
 
 def start():
-	
+
 	parser = argparse.ArgumentParser(prog='pintool2.py')
 	parser.add_argument('-e', dest='study', action='store_true', default=False, help='Study the password length, for example -e -l 40, with 40 characters')
 	parser.add_argument('-l', dest='len', type=str, nargs=1, default='10', help='Length of password (Default: 10 )')
@@ -47,16 +47,16 @@
 
 
 	if len(sys.argv) < 2:
-		parser.print_help()
-		print ("")
-                print ("Examples:")
-                print ("  ./pintool2.py -l 30 -c 1,2,3 -b _{} -s - baleful")
-		print ("  ./pintool2.py -l 37 -c 4 -i CTF{ -b }_ -s - -d '=> 651' reverse400")
-		print ("  ./pintool2.py -c 1,2,3 -b _ -s - -a 64 -l 28 wyvern")
-		print ("  ./pintool2.py -r -l 32 -c 1,2,3 -b _{$} -s - 01f47d58806a8264cd4b2b97b9dabb4a")
-		print ("")
-		sys.exit()
-	
+	    parser.print_help()
+	    print ("")
+            print ("Examples:")
+            print ("  ./pintool2.py -l 30 -c 1,2,3 -b _{} -s - baleful")
+	    print ("  ./pintool2.py -l 37 -c 4 -i CTF{ -b }_ -s - -d '=> 651' reverse400")
+	    print ("  ./pintool2.py -c 1,2,3 -b _ -s - -a 64 -l 28 wyvern")
+	    print ("  ./pintool2.py -r -l 32 -c 1,2,3 -b _{$} -s - 01f47d58806a8264cd4b2b97b9dabb4a")
+	    print ("")
+	    sys.exit()
+
 	args = parser.parse_args()
 
 	return args
@@ -64,13 +64,13 @@
 
 def getCharset(num,addchar):
 	char = ""
-	charset = { '1': s.ascii_lowercase, 
+	charset = { '1': s.ascii_lowercase,
 				'2': s.ascii_uppercase,
 				'3': s.digits,
 				'4': s.hexdigits,
 				'5': s.punctuation,
 				'6': s.printable}
-	
+
 
 	if num is 1:
 		return charset['1']
@@ -105,7 +105,7 @@
 	for i in range(1,passlen+1):
 		password = "_"*i
 		inscount = pin(password)
-		
+
 		if inicialdifference == 0:
 			inicialdifference = inscount
 
@@ -113,22 +113,22 @@
 
 
 def solve(initpass,passlen,symbfill,charset,expression,reverse):
-	
+
 	initlen = len(initpass)
-	
+
 	for i in range(initlen,passlen):
-		
+
 		tempassword = initpass + symbfill*(passlen-i)
 		inicialdifference = 0
 
 		for char in charset:
-			
+
 			password = tempassword[:i] + '\\'+char + tempassword[i+1:]
 			if reverse:
 				password = password[::-1]
 
 			inscount = pin(password)
-			
+
 			if inicialdifference == 0:
 				inicialdifference = inscount
 
@@ -163,9 +163,9 @@
 
 			if char == charset[-1]:
 				print "\n\nPassword not found, try to change charset...\n"
-				sys.exit()	
-	
-	
+				sys.exit()
+
+
 	return password.replace("\\","",1)
 
 
