#!/bin/sh

BASE=${BASH_SOURCE[0]%/*}
X86LOG='/tmp/to-release'
ARMLOG="$BASE/../lists/to-release-arm"

CORE='elfutils iputils traceroute argon2'
COMMUNITY='afl afpfs-ng aircrack-ng arduino arp-scan atftp batctl bettercap
binwalk bsdiff bully cadaver capstone checksec chntpw corkscrew cowpatty
cppcheck create_ap darkstat distorm dnstracer dscanner dsniff elfkickers
etherape ettercap evilginx exploitdb extundelete fcrackzip findmyhash findomain
flawfinder foremost freeradius ghidra gnuradio gqrx greenbone-security-assistant
hackrf hashcat hashcat-utils hashdeep hcxdumptool hcxkeys hcxtools hexyl
hping httping httptunnel httrack hydra i2pd impacket iodine ipmitool jad jadx
jhead john kcptun lorcon lynis macchanger masscan mat2 mdk3 medusa metasploit
mfoc miredo mitmproxy multimon-ng nbtscan ncrack netsniff-ng ngrep nikto
onionshare open-iscsi ophcrack p0f packer packeth pathod pdfcrack peda pixiewps
proxychains-ng proxytunnel ptunnel pwndbg pyrit python2-yara python-capstone
python-jsbeautifier radamsa radare2 radare2-cutter reaver rfdump rkhunter
ropgadget ropper routersploit scanmem scapy scrapy shellcheck siege sleuthkit
slowhttptest smali sniffglue splint sqlmap ssdeep sshtunnel sshuttle sslh
sslscan stunnel subbrute swaks sysdig tcpflow tcpreplay tcptrace testssl.sh
thc-ipv6 tinc tinyproxy tor torsocks udp2raw-tunnel unhide upx urh valabind
veracrypt volatility vulscan wavemon wifite wireshark-cli wireshark-gtk
wireshark-qt wpscan xortool yara zaproxy zmap zssh zzuf dmg2img'
EXTRA='bind-tools ddrescue exiv2 fping gdb gdb-common geoip kismet libpst lldb
ltrace mtr nmap perl-image-exiftool socat strace tcpdump testdisk truecrypt
valgrind'

echo "[+] syncing packages"
yay -Syy > /dev/null 2>&1

rm -f $X86LOG
touch $X86LOG
touch $ARMLOG

echo "[+] comparing packages: core"
for pkg in $CORE
do
  official="$(yay -Ss $pkg 2> /dev/null | grep "^core/$pkg " | cut -d ' ' -f 2)"
  blackarch="$(yay -Ss $pkg 2> /dev/null | grep "^blackarch/$pkg " |
    cut -d ' ' -f 2)"
  if [ "$official" != "$blackarch" ]
  then
    echo "    > update available: $pkg"
    echo $pkg >> $X86LOG
  fi
done

echo "[+] comparing packages: community"
for pkg in $COMMUNITY
do
  official="$(yay -Ss $pkg 2> /dev/null | grep "^community/$pkg " |
    cut -d ' ' -f 2)"
  blackarch="$(yay -Ss $pkg 2> /dev/null | grep "^blackarch/$pkg " |
    cut -d ' ' -f 2)"
  if [ "$official" != "$blackarch" ]
  then
    echo "    > update available: $pkg"
    echo $pkg >> $X86LOG
  fi
done

echo "[+] comparing packages: extra"
for pkg in $EXTRA
do
  official="$(yay -Ss $pkg 2> /dev/null | grep "^extra/$pkg " | cut -d ' ' -f 2)"
  blackarch="$(yay -Ss $pkg 2> /dev/null| grep "^blackarch/$pkg " |
    cut -d ' ' -f 2)"
  if [ "$official" != "$blackarch" ]
  then
    echo "    > update available: $pkg"
    echo $pkg >> $X86LOG
  fi
done

sort -u $X86LOG -o $X86LOG

# x86_64
if [ -f $X86LOG ]
then
  pkgs="$(cat $X86LOG)"
fi
if [ -n "$pkgs" ]
then
  echo "[+] updating packages: x86_64"
  for pkg in $pkgs
  do
    echo "    > $pkg"
  done
  echo
  ${BASE}/baofficial $pkgs

  # arm
  echo "[+] checking for arm packages"
  for apkg in $pkgs
  do
    arch="$(yay -Si $apkg | grep 'Architecture ' | head -1 | cut -d ':' -f 2 |
      sed 's/^ //')"
    if [ "$arch" = "x86_64" ]
    then
      echo $apkg >> $ARMLOG
    fi
  done
  sort -u $ARMLOG -o $ARMLOG
  if [ -f $ARMLOG ]
  then
    apkgs="$(cat $ARMLOG)"
  else
    echo "[+] done"
    exit
  fi
  if [ -n "$apkgs" ]
  then
    echo "[+] updating packages: arm"
    for apkg in $apkgs
    do
      echo "    > $apkg"
    done
    echo
    # default: off, as we need to wait until arm arch linux synced the mirrors
    # otherwise we would push the same versions over and over again
    #${BASE}/baofficial-arm $pkgs && ${BASE}/baclean
  fi
fi

${BASE}/baclean
ssh blackarch.org -l root 'date +%s > /var/www/blackarch/lastupdate'
ssh blackarch.org -l root 'cd /var/www && ./fixperms.sh'

echo "[+] done"

# EOF
