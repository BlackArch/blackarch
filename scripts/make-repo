#!/bin/bash
# usage: make-repo [package_directory] [build_directory]
# May be run from anywhere. Must live in '$projectroot/scripts'.

# Default settings.
arch=x86_64
jobs=22
use_whitelist=false
brutal_unlock=true

# The sorts are sensitive.
export LC_ALL=POSIX

msg() {
	echo >&2 "$*"
}

msg2() {
	echo >&2 "-----> $*"
}

warn() {
	echo >&2 "error> $*"
}

cache_rights() {
	msg 'attempting to cache rights...'
	sudo -v || msg 'sudo failed. continuing build anyways.'
}

while [[ -n "$1" ]] ; do
	case "$1" in
		--content-filter)
			content_filter=$2
			shift
			;;
		--whitelist)
			use_whitelist=true
			whitelist=$2
			shift
			;;
		--name-filter)
			name_filter=$2
			shift
			;;
		-a|--arch)
			arch=$2
			shift
			;;
		-j|--jobs)
			jobs=$2
			shift
			;;
		*)
			msg "'$arg' not recognized."
			exit 1
			;;
	esac
	shift
done

cache_rights

basedir=$(realpath "$(dirname "$0")")
cd "$basedir/.."

# PKGBUILDs and tracked source come from here.
pkgdir=$(realpath packages)

# PKGBUILDs and tracked source are copied here.
builddir=$(realpath build)
msg "clearing $builddir..."
rm -rf "$builddir"
mkdir -p "$builddir"

# Built package go here.
repodir=../repo/$arch
[[ -d "$repodir" ]] && mv -f "$repodir" "$repodir.bak"
mkdir -p "$basedir/$repodir"
repodir=$(realpath "$basedir/$repodir")

cd "$pkgdir"

# TODO: delegate filtering to depth-list
msg 'generating depth list...'
packs=$(if $use_whitelist ; then
	msg2 'using whitelist...'
	echo "${whitelist//,/ }" |
	  xargs "$basedir/depth-list"
else
	msg2 'using filters...'
	grep -l "$content_filter" */PKGBUILD | cut -d/ -f1 |
	  grep "$name_filter" | xargs "$basedir/depth-list";
fi)

# TODO: clean this up a bit maybe?
msg 'installing all dependencies...'
printf '%s\n' "${packs[@]}" |
cut -d' ' -f2 |
while read pack ; do
	. "$pack/PKGBUILD"

	printf '%s\n' "${depends[@]}" "${makedepends[@]}"
done | sort -u |
sed 's/\(>\|<\|=\).*//' |
while read dep ; do
	if pacman -Si "$dep" &> /dev/null ; then
		echo -n >&2 .
		echo "$dep"
	fi
done |
if [[ $arch == i686 ]] ; then
	linux32 sudo xargs pacman -Syy --noconfirm --needed --asdeps
else
	sudo xargs pacman -Syy --noconfirm --needed --asdeps
fi

packs+=$'\n0 end'

msg 'starting build...'

# Fed at the bottom to avoid creating a subshell.
while read item ; do
	cache_rights

	# Extract depth and name from item.
	read depth pack <<< "$item"
	msg "-item> $pack $depth"

	# Handle first package.
	if [[ -z "$last_depth" ]] ; then
		last_depth=$depth
	fi

	msg2 "$pack copying..."

	# packages/*/<package> -> build/<package>
	cp -fr "$pkgdir/$pack" "$builddir"

	msg2 "$pack cleaning..."

	# Better than nothing cleaning.
	# It is preferable to run 'git clean -dXf packages' or work with a fresh
	# clone.
	cd "${builddir:-safety}/$pack"
	rm -vrf */
	rm -vf *.{xz,gz,zip,bzip2,gunzip2,tgz,tar}

	#"$base/make-package" . $arch /tmp/make-repo$RANDOM.lck

	if [[ $depth != $last_depth ]] ; then
		$brutal_unlock && sudo rm -f /var/lib/pacman/db.lck

		msg "on level $last_depth"

		msg "queue: ${queue[@]}"

		printf "$builddir/%s\\n" "${queue[@]}" |
		  parallel --no-notice -I{} -n1 -j$jobs \
		    "$basedir/make-package" {} $arch $last_depth \
		    /tmp/make-repo$RANDOM$RANDOM.lck

		last_depth=$depth

		queue=()
	fi

	# Exit on last item.
	if [[ $depth == 0 ]] ; then
		break
	fi

	queue+=("$pack")
done < <(echo "$packs")

# vim: set ft=zsh:
